<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-24T10:21:05.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hxvin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>justjavac的知乎live听后总结</title>
    <link href="http://yoursite.com/2017/04/23/justjavac%E7%9A%84%E7%9F%A5%E4%B9%8Elive%E5%90%AC%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/23/justjavac的知乎live听后总结/</id>
    <published>2017-04-23T00:11:12.000Z</published>
    <updated>2017-04-24T10:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>get点：</strong></p>
<blockquote>
<p>1.跟别人互相review代码。<br>2.系统学习js。多写算法相关的，少写特效。如写一个计算器。<br>3.学习不止前端的东西，前端工程师是个程序员，要具备程序员的基础知识能力。<br>4.不要只会拷贝粘贴网上的代码而没有学会其中的知识点。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>5.面试官会根据你写在简历里的东西提问。<br>6.远离外包公司（三个月的经验五年的重复），职业生涯中技术难成长。<br>7.扎实基础再去学框架<br>8.移动端不用jQuery<br>9.与其做很多项目，不如做精一个两项目。<br>10.面试考察点：应届生：基础知识，程序员思维，代码规范；社招：解决问题能力。<br>11.对于学习，首选是看书，系统的全面的学。<br>推荐的书：<br>《黑客与画家》<br>《javascript高级程序设计》<br>《javascript精粹》<br>《你不知道的javascript》<br>推荐的网站：MDN<br>等等。。。。。很多</p>
</blockquote>
<p><strong><em>讲了四个小时，jjc大神好敬业，内容很丰盛，很详细，很值得去购买了听~~</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;get点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.跟别人互相review代码。&lt;br&gt;2.系统学习js。多写算法相关的，少写特效。如写一个计算器。&lt;br&gt;3.学习不止前端的东西，前端工程师是个程序员，要具备程序员的基础知识能力。&lt;br&gt;4.不要只会拷贝粘贴网上的代码而没有学会其中的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="-学习总结" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>第一次笔试，整理(1)</title>
    <link href="http://yoursite.com/2017/04/18/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AF%95%EF%BC%8C%E6%95%B4%E7%90%86-1/"/>
    <id>http://yoursite.com/2017/04/18/第一次笔试，整理-1/</id>
    <published>2017-04-18T10:11:12.000Z</published>
    <updated>2017-04-24T10:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>之前就关注了美图招聘的公众号，忽然惊喜地看到美图的春招，有招暑假的实习生，我匆忙制作了第一个自己的前端简历，然后投了，很惊喜地收到美图的笔试通知，然后隔天就要笔试了😂，之前都没做过面试的相关准备，也只能临时匆忙准备了.特别想提的一点是在过程中感觉到美图的HR和技术总监为人很 <code>nice</code>，~(≧▽≦)/~赞。</strong></p>
<p><strong>这几天都在考期中考，所以笔试完也没马上做总结就去准备接下去接连一天一科的期中考了。</strong></p>
<p><strong><em>笔试有要求题目不能外泄，以下只是自己依稀记得的不大会做，不会做的知识点，仅供补缺补漏使用。</em></strong></p>
<h3 id="1-CSS的某些样式是具有继承性的"><a href="#1-CSS的某些样式是具有继承性的" class="headerlink" title="1.CSS的某些样式是具有继承性的"></a>1.CSS的某些样式是具有继承性的</h3><p><strong>什么是继承呢？继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代。</strong></p>
<blockquote>
<p>不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。（注：基本上什么盒子外边距、内边距，还有定位什么的是不能被继承的）<br>所有元素可继承：visibility和cursor。<br>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。<br>终端块状元素可继承：text-indent和text-align。<br>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。<br>表格元素可继承：border-collapse。</p>
</blockquote>
<a id="more"></a>
<h3 id="2-对象的深拷贝与浅拷贝的区别"><a href="#2-对象的深拷贝与浅拷贝的区别" class="headerlink" title="2.对象的深拷贝与浅拷贝的区别"></a>2.对象的深拷贝与浅拷贝的区别</h3><blockquote>
<p>浅拷贝：仅仅复制对象的引用，而不是对象本身；<br>深拷贝：把复制的对象所引用的全部对象都复制一遍。</p>
</blockquote>
<p><strong>浅拷贝例子：</strong></p>
<figure class="highlight plain"><figcaption><span>================ 浅拷贝 ================ */</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">function simpleClone(initalObj) &#123;</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    for ( var i in initalObj) &#123;</div><div class="line">        obj[i] = initalObj[i];</div><div class="line">    &#125;</div><div class="line">    return obj;</div><div class="line">&#125;</div><div class="line">客户端调用</div><div class="line">/* ================ 客户端调用 ================ */</div><div class="line">var obj = &#123;</div><div class="line">    a: &quot;hello&quot;,</div><div class="line">    b: &#123;</div><div class="line">        a: &quot;world&quot;,</div><div class="line">        b: 21</div><div class="line">    &#125;,</div><div class="line">    c: [&quot;Bob&quot;, &quot;Tom&quot;, &quot;Jenny&quot;],</div><div class="line">    d: function() &#123;</div><div class="line">        alert(&quot;hello world&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var cloneObj = simpleClone(obj); // 对象拷贝</div><div class="line"> </div><div class="line">console.log(cloneObj.b); // &#123;a: &quot;world&quot;, b: 21&#125;</div><div class="line">console.log(cloneObj.c); // [&quot;Bob&quot;, &quot;Tom&quot;, &quot;Jenny&quot;]</div><div class="line">console.log(cloneObj.d); // function() &#123; alert(&quot;hello world&quot;); &#125;</div><div class="line"> </div><div class="line">// 修改拷贝后的对象</div><div class="line">cloneObj.b.a = &quot;changed&quot;;</div><div class="line">cloneObj.c = [1, 2, 3];</div><div class="line">cloneObj.d = function() &#123; alert(&quot;changed&quot;); &#125;;</div><div class="line"> </div><div class="line">console.log(obj.b); // &#123;a: &quot;changed&quot;, b: 21&#125; // // 原对象所引用的对象被修改了</div><div class="line"> </div><div class="line">console.log(obj.c); // [&quot;Bob&quot;, &quot;Tom&quot;, &quot;Jenny&quot;] // 原对象所引用的对象未被修改</div><div class="line">console.log(obj.d); // function() &#123; alert(&quot;hello world&quot;); &#125; // 原对象所引用的函数未被修改</div></pre></td></tr></table></figure>
<p><strong>深拷贝的实现也有很多种方法，这里就介绍Object.create()方法</strong></p>
<figure class="highlight plain"><figcaption><span>================ 深拷贝 ================ */</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function deepClone(initalObj, finalObj) &#123;</div><div class="line">    var obj = finalObj || &#123;&#125;;</div><div class="line">    for (var i in initalObj) &#123;</div><div class="line">        var prop = initalObj[i];</div><div class="line">        // 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况</div><div class="line">        if(prop === obj) &#123;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        if (typeof prop === &apos;object&apos;) &#123;</div><div class="line">            obj[i] = (prop.constructor === Array) ? [] : Object.create(prop);</div><div class="line">        &#125; else &#123;</div><div class="line">            obj[i] = prop;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;之前就关注了美图招聘的公众号，忽然惊喜地看到美图的春招，有招暑假的实习生，我匆忙制作了第一个自己的前端简历，然后投了，很惊喜地收到美图的笔试通知，然后隔天就要笔试了😂，之前都没做过面试的相关准备，也只能临时匆忙准备了.特别想提的一点是在过程中感觉到美图的HR和技术总监为人很 &lt;code&gt;nice&lt;/code&gt;，~(≧▽≦)/~赞。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这几天都在考期中考，所以笔试完也没马上做总结就去准备接下去接连一天一科的期中考了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;笔试有要求题目不能外泄，以下只是自己依稀记得的不大会做，不会做的知识点，仅供补缺补漏使用。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-CSS的某些样式是具有继承性的&quot;&gt;&lt;a href=&quot;#1-CSS的某些样式是具有继承性的&quot; class=&quot;headerlink&quot; title=&quot;1.CSS的某些样式是具有继承性的&quot;&gt;&lt;/a&gt;1.CSS的某些样式是具有继承性的&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;什么是继承呢？继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。（注：基本上什么盒子外边距、内边距，还有定位什么的是不能被继承的）&lt;br&gt;所有元素可继承：visibility和cursor。&lt;br&gt;内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。&lt;br&gt;终端块状元素可继承：text-indent和text-align。&lt;br&gt;列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。&lt;br&gt;表格元素可继承：border-collapse。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="-笔试 -美图" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AF%95-%E7%BE%8E%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的程序设计(-)</title>
    <link href="http://yoursite.com/2017/04/18/js%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/04/18/js面对对象/</id>
    <published>2017-04-17T16:11:12.000Z</published>
    <updated>2017-04-24T10:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的程序设计"><a href="#面向对象的程序设计" class="headerlink" title="面向对象的程序设计"></a>面向对象的程序设计</h1><h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><h3 id="定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数"><a href="#定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数" class="headerlink" title="定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数"></a>定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数</h3><h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><ul>
<li>数据属性  <ul>
<li>[[Configurabke]]:能否通过delete删除属性从而重新定义属性  </li>
</ul>
</li>
<li>访问器属性  </li>
</ul>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="可以通过“构造函数”或者“对象字面量”方法创建函数"><a href="#可以通过“构造函数”或者“对象字面量”方法创建函数" class="headerlink" title="可以通过“构造函数”或者“对象字面量”方法创建函数"></a>可以通过“构造函数”或者“对象字面量”方法创建函数</h3><ul>
<li>缺点：通过一个接口创建很多对象，会产生大量的重复代码  </li>
</ul>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><a id="more"></a>
<ul>
<li><p>function creatPerson(name,age,job){  </p>
<pre><code>var o=new Object();  
o.name=name;  
o.age=age;  
o.job=job;  
return o  
</code></pre><p>  }                                                                        var person1 = creatPerson(“hxvin”,21,”F-E”);  </p>
</li>
<li><p>用函数来封装以特定接口创建对象的细节  </p>
</li>
<li>缺点：没有解决对象识别的问题  </li>
</ul>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><ul>
<li><p>function Person(name,age,job){  </p>
<pre><code>this.name=name;  
this.age=age;  
this.job=job;  
this.sayName=function sayName(){alert(this.name);};  
</code></pre><p>  };<br>  var person1=new Person(“hxvin”,21,”Front-end-Engineer”);  </p>
</li>
<li><p>和工厂模式的区别：  </p>
<ul>
<li>没有显式的创建对象  </li>
<li>直接将属性和方法赋给了this  </li>
<li>没有return语句  </li>
</ul>
</li>
<li>用这种方式调用构造函数会经历一下四个步骤  <ul>
<li>执行构造函数中的代码（为这个新对象添加属性）  </li>
<li>创建一个新对象  </li>
<li>将构造函数的作用域赋给新对象  </li>
<li>返回新对象  </li>
</ul>
</li>
<li><p>缺点：每个方法都要在每个实例上创建一遍  </p>
<ul>
<li>上例中sayName方法相当于this.sayName=new Funciton(“alert(name,age,job)”)  </li>
<li><p>解决方法  </p>
<ul>
<li><p>function Person(name,age,job){  </p>
<pre><code>this.name=name;  
this.age=age;  
this.job=job;  
this.sayName=sayName  
</code></pre><p>  };<br>  function sayName(){alert(this.name);};<br>  //将sayName添加到全局变量中，这样显然有很多不足  </p>
</li>
<li><p>原型模式  </p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul>
<li><p>概念  </p>
<ul>
<li><p>每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以<br>  由特定类型的所有实例共享的属性和方法  </p>
</li>
<li><p>使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法  </p>
</li>
<li>创建原型:function Person(){};<br>  Person.prototype.name=“hxvin”；Person.prototype.sayname=function(){ alert(this.name);  }；                         var person1=new Person();                                     person1.dayName(); //“hxvin”  </li>
</ul>
</li>
<li><p>理解原型  </p>
<ul>
<li>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个protoype属性，这个属性指向函数的原型对象。  </li>
<li>在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，包含一个指向prototype属性所在函数的指针  </li>
<li>搜索流程  <ul>
<li>当对象实例中与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性会屏蔽原型中的属性  </li>
<li>每当代码读取某个对象属性时，先从实例中搜索，后在原型对象中查找  </li>
<li>hasOwnProperty()  <ul>
<li>用来检查一个属性时存在于对象实例中还是原型中，这个方法只在给定属性存在于对象实例中时，才会返回true  </li>
<li>alert(person1 hasOwnProperty(“name”));       //返回true或false  </li>
</ul>
</li>
</ul>
</li>
<li>[[prototype]]  <ul>
<li>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象  </li>
<li>利用[[prototype]]  <ul>
<li>ECMAScript5增加了一个新方法，叫Object.getPropertyOf(),在所有支持的实现中，这个方法返回[[prototype]]的值  <ul>
<li>支持的浏览器：IE9+,FireFox3.5+,Safari 3.5+,Opera12+,Chrome  </li>
</ul>
</li>
<li>但可以通过isPrototypeOf()方法来确定对象之间是否存在这种关系  <ul>
<li>alert(Person.protoype isPrototypeOf(person1));   //true  </li>
</ul>
</li>
<li>没有标准的方式访问[[prototype]]  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>更简单的原型语法  </p>
<ul>
<li><p>//可以重新设置constructor<br>  function Perspn(){};<br>  Person.prototype={  </p>
<pre><code>constructor=Person,  
name=&quot;Nick&quot;  
</code></pre><p>  };  </p>
</li>
<li><p>function Person(){};<br>  Person.prototype={  </p>
<pre><code>name=&quot;Nick&quot;,  
sayName=function(){alert(this.name)}  
</code></pre><p>  }  </p>
</li>
<li><p>注意！！！！constructor属性不再指向Person了，我们在这里使用的语法本质上完全重写了默认的prototype对象，因此现在的constructor指向Object构造函数  </p>
</li>
</ul>
</li>
<li>原型的动态性  <ul>
<li>注意：如果把原型修改为另一个对象就等于切断了构造函数与最初原型之间的联系（因为改变了[[prototype]]指针）  </li>
<li>我们对原型对象所做的任何修改都能够立即从实例上反映出来  </li>
</ul>
</li>
<li>原型对象的问题（缺点）  <ul>
<li>1、省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值  </li>
<li>2、当在实例中对引用类型的值进行操作时，很有可能改变原型中的值。（共享问题）  <ul>
<li>由于friends 数组存在于Person.prototype而非person1中，所以刚刚提到的修改也会通过person2. friends (与person2.friends指向同一个数组反映出来  </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><ul>
<li><p>function Person(name,age,job){  </p>
<pre><code>this.name=name,  
this.age=age,  
this.job=job  
</code></pre><p>  };<br>  Person.prototype={  </p>
<pre><code>constructor=Person,  
sayName=function(){alert(this.name)}  
</code></pre><p>  }  </p>
<ul>
<li>Person1.friends不会影响到Person2.friends，因为它们分别引用了不同的数组  </li>
</ul>
</li>
<li>优点  <ul>
<li>每个实例都会有自己的一份实例属性副本，但同时由共享着对方法的引用，最大限度的节省了内存  </li>
<li>创建自定义类型最常见的方式  </li>
<li>支持向构造函数传递参数  </li>
</ul>
</li>
</ul>
<h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><ul>
<li><p>function Person(name,age,job){                       //属性  </p>
<pre><code>this.name=name;  
this.age=age;  
this.job=job;  
//方法  
if(typeof sayName != &quot;function&quot;){  
    Person.prototype.sayName = function(){alert(this.name)}  
}  
</code></pre><p>  }  </p>
<blockquote>
<p>//方法中，只在sayName()方法不存在的清况下，才会将它添加到原型中。 这里对原型所做的修改，能够立即在所有实例中得到反映。  </p>
</blockquote>
</li>
<li>把所有信息封装在构造函数中，并通过if语句初始化原型  </li>
</ul>
<h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><ul>
<li><p>function Person(name,age,job){  </p>
<pre><code>var o = new Object();  
o.name = name;  
o.age = age;  
o.job = job;  
o.sayName = function(){alert(o.name)};  
return o  
</code></pre><p>  };<br>  var person1 = new Person();  </p>
</li>
<li><p>应用场景：创建有额外方法的特殊对象，而又不想改变其原有的构造函数  </p>
</li>
<li>特点  <ul>
<li>返回的对象和构造函数没有关系  </li>
<li>不能依赖instanceof操作符来确定对象类型  </li>
</ul>
</li>
</ul>
<h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><ul>
<li>所谓稳妥对象，指的是没有公共属性， 而且其方法也不引用this的对象。  </li>
<li><p>function Person(name,age,job){  </p>
<pre><code>var o = new Object();  
o.sayName = function(){alert(name)}  
</code></pre><p>  }  </p>
<p>  var friend = Person (“hxvin”,”21”,”f-e”);  </p>
<pre><code>friend.sayName(}; //“hxvin”   
</code></pre><p>&gt;<br>这样，变蜇person 中保存的是一个稳妥对象， 而除了调用sayName() 方法外,没有别的方式可以访问其数据成员。  </p>
</li>
<li><p>这种模式创建的对象中，出了使用sayName()方法之外，没有其他任何办法访问name的值。  </p>
</li>
<li>应用场景： 一些安全的环境中（这些环境中会禁止使用this和new), 或者在防止数据被其他应用程序（如Mashup程序）改动时使用  </li>
<li>特点：遵循与寄生构造函数类似的模式，但有两点不同： 一是新创建对象的实例方法不引用this;二是不使用new操作符调用构造函数  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象的程序设计&quot;&gt;&lt;a href=&quot;#面向对象的程序设计&quot; class=&quot;headerlink&quot; title=&quot;面向对象的程序设计&quot;&gt;&lt;/a&gt;面向对象的程序设计&lt;/h1&gt;&lt;h2 id=&quot;理解对象&quot;&gt;&lt;a href=&quot;#理解对象&quot; class=&quot;headerlink&quot; title=&quot;理解对象&quot;&gt;&lt;/a&gt;理解对象&lt;/h2&gt;&lt;h3 id=&quot;定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数&quot;&gt;&lt;a href=&quot;#定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数&quot; class=&quot;headerlink&quot; title=&quot;定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数&quot;&gt;&lt;/a&gt;定义：对象是无序属性集合，其属性可以包含基本值、对象或者函数&lt;/h3&gt;&lt;h3 id=&quot;属性类型&quot;&gt;&lt;a href=&quot;#属性类型&quot; class=&quot;headerlink&quot; title=&quot;属性类型&quot;&gt;&lt;/a&gt;属性类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据属性  &lt;ul&gt;
&lt;li&gt;[[Configurabke]]:能否通过delete删除属性从而重新定义属性  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问器属性  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h2&gt;&lt;h3 id=&quot;可以通过“构造函数”或者“对象字面量”方法创建函数&quot;&gt;&lt;a href=&quot;#可以通过“构造函数”或者“对象字面量”方法创建函数&quot; class=&quot;headerlink&quot; title=&quot;可以通过“构造函数”或者“对象字面量”方法创建函数&quot;&gt;&lt;/a&gt;可以通过“构造函数”或者“对象字面量”方法创建函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;缺点：通过一个接口创建很多对象，会产生大量的重复代码  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;
    
    </summary>
    
    
      <category term="-学习笔记 -JavaScript" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-JavaScript/"/>
    
  </entry>
  
</feed>
