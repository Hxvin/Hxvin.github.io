<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hxvin的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hxvin.me/"/>
  <updated>2017-10-24T15:48:13.000Z</updated>
  <id>http://www.hxvin.me/</id>
  
  <author>
    <name>Hxvin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搁浅</title>
    <link href="http://www.hxvin.me/2017/10/24/%E6%90%81%E6%B5%85/"/>
    <id>http://www.hxvin.me/2017/10/24/搁浅/</id>
    <published>2017-10-24T15:20:41.000Z</published>
    <updated>2017-10-24T15:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有点茫然，对于编程的学习，到底什么样的方法才是好的，才是适合我的。</p>
<p>实习三个月，我不断汲取新知识新技术，react，node，php，git。。。各种，又杂又乱，虽说刚开始是挺崩溃，比如node，php一周上手写项目代码，react两天上手写项目代码，以前习惯系统学习的我不得不做出适应，快速去学习。</p>
<p>这样的环境下，步伐迈得很快，但是都是学部分部分的，没有系统，所以感觉自己不敢说会这门技术。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有点茫然，对于编程的学习，到底什么样的方法才是好的，才是适合我的。&lt;/p&gt;
&lt;p&gt;实习三个月，我不断汲取新知识新技术，react，node，php，git。。。各种，又杂又乱，虽说刚开始是挺崩溃，比如node，php一周上手写项目代码，react两天上手写项目代码，以前
    
    </summary>
    
    
      <category term="随笔" scheme="http://www.hxvin.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>简单的方法掌握JS中slice,splice和split的使用方法</title>
    <link href="http://www.hxvin.me/2017/10/15/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E6%8E%8C%E6%8F%A1JS%E4%B8%ADslice-splice%E5%92%8Csplit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://www.hxvin.me/2017/10/15/简单的方法掌握JS中slice-splice和split的使用方法/</id>
    <published>2017-10-15T09:15:26.000Z</published>
    <updated>2017-10-17T13:42:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，js的api的命名一般都有它的意义所在，通过英文就能大概理解是干啥用的。（可见英语多重要。。。）<br>现在看看slice,splice和split分别是啥意思</p>
<ul>
<li>slice：片</li>
<li>splice： 剪接</li>
<li>split： 分裂</li>
</ul>
<h3 id="slice：片"><a href="#slice：片" class="headerlink" title="slice：片"></a>slice：片</h3><blockquote>
<p>可以理解成是提取某东西的片段</p>
</blockquote>
<p>用法1：array.slice(start,end) -&gt; 提取数组的片段</p>
<p>简单可以理解成start是提取片段的开头位置(0开始算)，end是提取的末尾位置(1开始算)<br>看例子领会一下</p>
 <a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//如果不传入参数二，那么将从参数一的索引位置开始截取，一直到数组尾</div><div class="line">var a=[1,2,3,4,5,6];</div><div class="line">var b=a.slice(0,3);  //[1,2,3]</div><div class="line">var c=a.slice(3);    //[4,5,6]</div><div class="line"> </div><div class="line">//如果两个参数中的任何一个是负数，array.length会和它们相加，试图让它们成为非负数，举例说明：</div><div class="line">//当只传入一个参数，且是负数时，length会与参数相加，然后再截取</div><div class="line">var a=[1,2,3,4,5,6];</div><div class="line">var b=a.slice(-1);  //[6]</div><div class="line"> </div><div class="line">//当只传入一个参数，是负数时,并且参数的绝对值大于数组length时，会截取整个数组</div><div class="line">var a=[1,2,3,4,5,6];</div><div class="line">var b=a.slice(-6);  //[1,2,3,4,5,6]</div><div class="line">var c=a.slice(-8);  //[1,2,3,4,5,6]</div><div class="line"> </div><div class="line">//当传入两个参数一正一负时，length也会先于负数相加后，再截取</div><div class="line">var a=[1,2,3,4,5,6];</div><div class="line">var b=a.slice(2,-3);  //[3]</div><div class="line"> </div><div class="line">//当传入一个参数，大于length时，将返回一个空数组</div><div class="line">var a=[1,2,3,4,5,6];</div><div class="line">var b=a.slice(6);　　//[]</div></pre></td></tr></table></figure>
<p>用法2：string.slice(start,end)   -&gt; 提取字符串的片段<br>道理同上<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a=&quot;i am a boy&quot;;</div><div class="line">var b=a.slice(0,6);  //&quot;i am a&quot;</div></pre></td></tr></table></figure>
<h3 id="splice：-剪接"><a href="#splice：-剪接" class="headerlink" title="splice： 剪接"></a>splice： 剪接</h3><blockquote>
<p>可以理解成一个东西剪掉一部分并接上新的部分</p>
</blockquote>
<p>用法：array.splice(start,deleteCount,item…)</p>
<p>可以理解成array剪掉初始位置为start，个数为deleteCount的部分，该部分赋值给新的变量，如果有item，则接入被剪掉的部分</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line">var b=a.splice(1,1,&apos;e&apos;,&apos;f&apos;);  //a=[&apos;a&apos;,&apos;e&apos;,&apos;f&apos;,&apos;c&apos;],b=[&apos;b&apos;]</div></pre></td></tr></table></figure>
<h3 id="split：-分割"><a href="#split：-分割" class="headerlink" title="split： 分割"></a>split： 分割</h3><p>用法：string.split(separator,limit)</p>
<blockquote>
<p>可以理解成把一个东西从第一位置开始根据separator分割成limit个片段来创建一个字符串数组</p>
</blockquote>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a=&quot;0,1,2,3,4,5,6&quot;;</div><div class="line">var b=a.split(&quot;&quot;,3); // [&quot;0&quot;, &quot;,&quot;, &quot;1&quot;]</div><div class="line"></div><div class="line">var a=&quot;0,1,2,3,4,5,6&quot;;</div><div class="line">var b=a.split(&quot;,&quot;,3);  // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</div></pre></td></tr></table></figure>
<p>ps： join的作用恰好与split相反，是添加组装作用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;];</div><div class="line">var b = arr.join(&quot;&quot;);// &quot;012&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，js的api的命名一般都有它的意义所在，通过英文就能大概理解是干啥用的。（可见英语多重要。。。）&lt;br&gt;现在看看slice,splice和split分别是啥意思&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slice：片&lt;/li&gt;
&lt;li&gt;splice： 剪接&lt;/li&gt;
&lt;li&gt;split： 分裂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;slice：片&quot;&gt;&lt;a href=&quot;#slice：片&quot; class=&quot;headerlink&quot; title=&quot;slice：片&quot;&gt;&lt;/a&gt;slice：片&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;可以理解成是提取某东西的片段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用法1：array.slice(start,end) -&amp;gt; 提取数组的片段&lt;/p&gt;
&lt;p&gt;简单可以理解成start是提取片段的开头位置(0开始算)，end是提取的末尾位置(1开始算)&lt;br&gt;看例子领会一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="JS" scheme="http://www.hxvin.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理centos的80端口</title>
    <link href="http://www.hxvin.me/2017/10/14/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86centos%E7%9A%8480%E7%AB%AF%E5%8F%A3/"/>
    <id>http://www.hxvin.me/2017/10/14/Nginx反向代理centos的80端口/</id>
    <published>2017-10-14T11:12:57.000Z</published>
    <updated>2017-10-15T13:15:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近换了个新的云主机，重新配置了下centos的环境。记录下Nginx反向代理centos的80端口的流程。</p>
<p>HTTP请求是80端口，但是在Linux上非root权限是无法使用1024以下端口的，并且因为安全原因，最好不要使用root权限登录服务器，所以无法直接用node.js程序监听80端口。因此我们需要使用Nginx给node.js做反向代理，将80端口指向应用程序监听的端口(如node.js默认的3000端口)。</p>
<ol>
<li>添加Nginx仓库</li>
</ol>
<blockquote>
<p>yum install epel-release</p>
</blockquote>
<p>2.下载Nginx</p>
<blockquote>
<p>yum install nginx</p>
</blockquote>
<p>3.启用nginx服务</p>
<blockquote>
<p>service nginx start</p>
</blockquote>
 <a id="more"></a>
<p>4.添加开机启动</p>
<blockquote>
<p>systemctl enable nginx</p>
</blockquote>
<p>5.修改Nginx配置文件</p>
<blockquote>
<p>vi /etc/nginx/nginx.conf</p>
</blockquote>
<p>6.进入配置文件后修改下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name www.hxvin.com,hxvin.com;   /#修改这一行（写上你绑定的域名）</div><div class="line">       root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">proxy_pass http://127.0.0.1:4000;  # 添上这一行（端口号写你nodejs运行的端口号）</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>7.测试配置文件是否能够正确运行</p>
<blockquote>
<p>nginx -t</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@jdu4e00u53f7 ~]# nginx -t</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure>
<p>出现这样，证明配置成功</p>
<p>8.重启nginx</p>
<blockquote>
<p>service nginx restart</p>
</blockquote>
<p>现在直接在浏览器中输入我们配置的域名就可以访问我们的项目了。</p>
<p>ps:如果你用的云主机是国内的，那么你的域名必须先备案才能访问，不然只能域名加后端端口号访问了，如www.hxvin.com:4000</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近换了个新的云主机，重新配置了下centos的环境。记录下Nginx反向代理centos的80端口的流程。&lt;/p&gt;
&lt;p&gt;HTTP请求是80端口，但是在Linux上非root权限是无法使用1024以下端口的，并且因为安全原因，最好不要使用root权限登录服务器，所以无法直接用node.js程序监听80端口。因此我们需要使用Nginx给node.js做反向代理，将80端口指向应用程序监听的端口(如node.js默认的3000端口)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加Nginx仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install epel-release&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.下载Nginx&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.启用nginx服务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;service nginx start&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="Nginx" scheme="http://www.hxvin.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>web移动端开发总结3--抓包工具篇(Charles)</title>
    <link href="http://www.hxvin.me/2017/10/11/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%933-%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%AF%87-Charles/"/>
    <id>http://www.hxvin.me/2017/10/11/web移动端开发总结3-抓包工具篇-Charles/</id>
    <published>2017-10-10T17:11:24.000Z</published>
    <updated>2017-10-15T13:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中经常使用Charles来抓取网页的接口，方便调试。</p>
<p>这边推荐两篇教程</p>
<p>教程1：<br>mac环境下使用Charles抓包Https请求<br><a href="https://segmentfault.com/a/1190000005070614" target="_blank" rel="external">链接</a></p>
<p>教程2：<br>抓包并篡改返回数据图文详解(有了这个，调试时你就不用麻烦后端给你调整接口的数据)<br><a href="http://www.cnblogs.com/dsxniubility/p/4621314.html" target="_blank" rel="external">链接</a></p>
<p>抓包工具不仅可以调试的时候用，还有其他用途，比如抓别人网站或者app的接口，然后做个高仿demo玩玩😄</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发过程中经常使用Charles来抓取网页的接口，方便调试。&lt;/p&gt;
&lt;p&gt;这边推荐两篇教程&lt;/p&gt;
&lt;p&gt;教程1：&lt;br&gt;mac环境下使用Charles抓包Https请求&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/11900000050
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="web移动端" scheme="http://www.hxvin.me/tags/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web移动端开发总结2--调试篇</title>
    <link href="http://www.hxvin.me/2017/10/10/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%932-%E8%B0%83%E8%AF%95%E7%AF%87/"/>
    <id>http://www.hxvin.me/2017/10/10/web移动端开发总结2-调试篇/</id>
    <published>2017-10-10T08:19:59.000Z</published>
    <updated>2017-10-15T13:12:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>web移动端开发的调试分ios设备和安卓设备。</p>
<p>ios设备：<br>1.在ios设备上<br>点击   设置—Safari—高级—web检查器</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-abff938d3a5a096c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>2.用数据线连接mac电脑</p>
<p>3.ios设备上用Safari打开你要调试的网页</p>
 <a id="more"></a>
<p>4.打开电脑端的safari<br>点击顶栏的开发—鼠标放在你的设备名称上—点击你要调试的网页</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-aaace6ac1f18d12c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>5.跳出web检查器，进行调试</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-42e94a51bbf64c7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web移动端开发的调试分ios设备和安卓设备。&lt;/p&gt;
&lt;p&gt;ios设备：&lt;br&gt;1.在ios设备上&lt;br&gt;点击   设置—Safari—高级—web检查器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5287253-abff938d3a5a096c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.用数据线连接mac电脑&lt;/p&gt;
&lt;p&gt;3.ios设备上用Safari打开你要调试的网页&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="web移动端" scheme="http://www.hxvin.me/tags/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web移动端开发总结1--适配篇</title>
    <link href="http://www.hxvin.me/2017/10/10/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%931-%E9%80%82%E9%85%8D%E7%AF%87/"/>
    <id>http://www.hxvin.me/2017/10/10/web移动端开发总结1-适配篇/</id>
    <published>2017-10-10T07:05:47.000Z</published>
    <updated>2017-10-15T13:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在公司主要写web移动端的项目，一开始较大的感触就是适配很麻烦，分ios和安卓，安卓生态又混乱得很，所以适配要做好了，不然这个设备好好的，有些设备却页面错乱。</p>
<p>在网上找了很多方案，踩了不少坑。</p>
<p>方案一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">(function (doc, win) &#123;</div><div class="line">          console.log(&quot;dpr:&quot;+win.devicePixelRatio); </div><div class="line">          var docEle = doc.documentElement,</div><div class="line">              isIos = navigator.userAgent.match(/iphone|ipod|ipad/gi),</div><div class="line">              dpr=Math.min(win.devicePixelRatio, 3);</div><div class="line">              scale = 1 / dpr,</div><div class="line"></div><div class="line">              resizeEvent = &apos;orientationchange&apos; in window ? &apos;orientationchange&apos; : &apos;resize&apos;;</div><div class="line"></div><div class="line">          docEle.dataset.dpr = dpr;</div><div class="line"></div><div class="line">          var metaEle = doc.createElement(&apos;meta&apos;);</div><div class="line">          metaEle.name = &apos;viewport&apos;;</div><div class="line">          metaEle.content = &apos;initial-scale=&apos; + scale + &apos;,maximum-scale=&apos; + scale;</div><div class="line">          docEle.firstElementChild.appendChild(metaEle);</div><div class="line">          </div><div class="line"></div><div class="line">          var recalCulate = function () &#123;</div><div class="line">                  var width = docEle.clientWidth;</div><div class="line">                  if (width / dpr &gt; 640) &#123;</div><div class="line">                      width = 640 * dpr;</div><div class="line">                   &#125;</div><div class="line">                docEle.style.fontSize = 20 * (width / 750) + &apos;px&apos;;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">          recalCulate()</div><div class="line"></div><div class="line">          if (!doc.addEventListener) return;</div><div class="line">          win.addEventListener(resizeEvent, recalCulate, false);</div><div class="line">        &#125;)(document, window);</div></pre></td></tr></table></figure>
 <a id="more"></a>
<p>获取设备dpr<br>算出缩放比例 scale = 1/dpr<br>创建meta以及属性<br>将scale值赋给initial-scale，maximum-scale<br>meta插入到文档中<br>创建屏幕大小改变重新计算函数并监听</p>
<p>特点：这个方案根据设备等比例缩放，每个设备显示内容一致。<br> 缺点：当我用这套方案时，有个问题，因为监听resizeEvent，导致页面打开会先内容变大，然后再正常显示，很是影响用户体验。<br><a href="http://www.cnblogs.com/leinov/p/5209456.html" target="_blank" rel="external">参考链接</a></p>
<p>方案二（推荐）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//获取屏幕比例</div><div class="line">function sreenRatio() &#123;</div><div class="line">    const ua = navigator.userAgent;</div><div class="line">    const matches = ua.match(/Android[\S\s]+AppleWebkit\/(\d&#123;3&#125;)/i);</div><div class="line">    const UCversion = ua.match(/U3\/((\d+|\.)&#123;5,&#125;)/i);</div><div class="line">    const isUCHd = UCversion &amp;&amp; parseInt(UCversion[1].split(&apos;.&apos;).join(&apos;&apos;), 10) &gt;= 80;</div><div class="line">    const isIos = navigator.appVersion.match(/(iphone|ipad|ipod)/gi);</div><div class="line">    var dpr = window.devicePixelRatio || 1;</div><div class="line">    if (!isIos &amp;&amp; !(matches &amp;&amp; matches[1] &gt; 534) &amp;&amp; !isUCHd) &#123;</div><div class="line">        // 如果非iOS, 非Android4.3以上, 非UC内核, 就不执行高清, dpr设为1;</div><div class="line">        dpr = 1;</div><div class="line">    &#125;</div><div class="line">    return dpr;</div><div class="line">&#125;</div><div class="line">//初始化屏幕比例</div><div class="line">function screenRatio(baseFontSize, fontscale) &#123;</div><div class="line">    var ratio = sreenRatio();     </div><div class="line">    var scale = document.createElement(&apos;meta&apos;);</div><div class="line">    var scaleRatio = 1 / ratio;</div><div class="line">    scale.name = &apos;viewport&apos;;</div><div class="line">    scale.content = &apos;width=device-width,&apos;+&apos;initial-scale=&apos; + scaleRatio + &apos;, maximum-scale=&apos; + scaleRatio + &apos;, minimum-scale=&apos; +</div><div class="line">        scaleRatio + &apos;, user-scalable=no&apos;;</div><div class="line">    var s = document.getElementsByTagName(&apos;title&apos;)[0];</div><div class="line">    s.parentNode.insertBefore(scale, s);</div><div class="line">    var _baseFontSize = baseFontSize || 100;</div><div class="line">    var _fontscale = fontscale || 1;</div><div class="line">    document.documentElement.style.fontSize = _baseFontSize / 2 * ratio * _fontscale+&apos;px&apos;;</div><div class="line">&#125;</div><div class="line">    if (window.screen.width &gt;= 768) &#123;</div><div class="line">        screenRatio(100, 1.5);//字体放大1.5倍</div><div class="line">    &#125; else &#123;</div><div class="line">        screenRatio();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>特点：</p>
<ul>
<li>引用简单，布局简便</li>
<li>根据设备屏幕的DPR,自动设置最合适的高清缩放。</li>
<li>保证了不同设备下视觉体验的一致性。（老方案是，屏幕越大元素越大；此方案是，屏幕越大，看的越多）</li>
<li>有效解决移动端真实1px问题（这里的1px 是设备屏幕上的物理像素）<br>ps：而且不会出现方案一的问题</li>
</ul>
<p>缺点：1.有可能会出现字体会不受控制的变大的情况，解决方法：css加上一下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*, *:before, *:after &#123; max-height: 100000px &#125;</div></pre></td></tr></table></figure>
<ol>
<li>感觉没啥问题了，然而我司测试硬生生发现一个bug -&gt; 在某安卓设备发现在QQ上打开网页出现页面错乱。解决方法：判断如果是安卓设备，scale.content加上target-densitydpi=device-dpi</li>
</ol>
<p>修正：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   //获取屏幕比例</div><div class="line">   function sreenRatio() &#123;</div><div class="line">       const ua = navigator.userAgent;</div><div class="line">       const matches = ua.match(/Android[\S\s]+AppleWebkit\/(\d&#123;3&#125;)/i);</div><div class="line">       const UCversion = ua.match(/U3\/((\d+|\.)&#123;5,&#125;)/i);</div><div class="line">       const isUCHd = UCversion &amp;&amp; parseInt(UCversion[1].split(&apos;.&apos;).join(&apos;&apos;), 10) &gt;= 80;</div><div class="line">       const isIos = navigator.appVersion.match(/(iphone|ipad|ipod)/gi);</div><div class="line">       var dpr = window.devicePixelRatio || 1;</div><div class="line">       if (!isIos &amp;&amp; !(matches &amp;&amp; matches[1] &gt; 534) &amp;&amp; !isUCHd) &#123;</div><div class="line">           // 如果非iOS, 非Android4.3以上, 非UC内核, 就不执行高清, dpr设为1;</div><div class="line">           dpr = 1;</div><div class="line">       &#125;</div><div class="line">       return dpr;</div><div class="line">   &#125;</div><div class="line">   //初始化屏幕比例</div><div class="line">   function screenRatio(baseFontSize, fontscale) &#123;</div><div class="line">       var ratio = sreenRatio();</div><div class="line">       var scale = document.createElement(&apos;meta&apos;);</div><div class="line">       var scaleRatio = 1 / ratio;</div><div class="line">       scale.name = &apos;viewport&apos;;</div><div class="line">	&lt;%/*安卓设备兼容*/%&gt;</div><div class="line">	if (/Android/i.test(navigator.userAgent) == true) &#123;</div><div class="line">		scale.content = &apos;width=device-width, target-densitydpi=device-dpi,&apos;+&apos; initial-scale=&apos; + scaleRatio + &apos;, maximum-scale=&apos; + scaleRatio + &apos;, minimum-scale=&apos; +</div><div class="line">            scaleRatio + &apos;, user-scalable=no&apos;;</div><div class="line">	&lt;%/*iOS设备*/%&gt;</div><div class="line">	&#125; else &#123;</div><div class="line">		scale.content = &apos;width=device-width,&apos;+&apos;initial-scale=&apos; + scaleRatio + &apos;, maximum-scale=&apos; + scaleRatio + &apos;, minimum-scale=&apos; +</div><div class="line">            scaleRatio + &apos;, user-scalable=no&apos;;</div><div class="line">	&#125;</div><div class="line">       var s = document.getElementsByTagName(&apos;title&apos;)[0];</div><div class="line">       s.parentNode.insertBefore(scale, s);</div><div class="line">       var _baseFontSize = baseFontSize || 100;</div><div class="line">       var _fontscale = fontscale || 1;</div><div class="line">       document.documentElement.style.fontSize = _baseFontSize / 2 * ratio * _fontscale+&apos;px&apos;;</div><div class="line">   &#125;</div><div class="line">var isAndroid = /Android/i.test(navigator.userAgent) ? true : false;</div><div class="line">&lt;%/*安卓设备不做高清放大处理*/%&gt;</div><div class="line">   if (window.screen.width &gt;= 768 &amp;&amp; !isAndroid) &#123;</div><div class="line">       screenRatio(null, 1.5);&lt;%/*字体放大1.5倍*/%&gt;</div><div class="line">   &#125; else &#123;</div><div class="line">       screenRatio();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/985d26b40199" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在公司主要写web移动端的项目，一开始较大的感触就是适配很麻烦，分ios和安卓，安卓生态又混乱得很，所以适配要做好了，不然这个设备好好的，有些设备却页面错乱。&lt;/p&gt;
&lt;p&gt;在网上找了很多方案，踩了不少坑。&lt;/p&gt;
&lt;p&gt;方案一：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(function (doc, win) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          console.log(&amp;quot;dpr:&amp;quot;+win.devicePixelRatio); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          var docEle = doc.documentElement,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              isIos = navigator.userAgent.match(/iphone|ipod|ipad/gi),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              dpr=Math.min(win.devicePixelRatio, 3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              scale = 1 / dpr,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              resizeEvent = &amp;apos;orientationchange&amp;apos; in window ? &amp;apos;orientationchange&amp;apos; : &amp;apos;resize&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          docEle.dataset.dpr = dpr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          var metaEle = doc.createElement(&amp;apos;meta&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          metaEle.name = &amp;apos;viewport&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          metaEle.content = &amp;apos;initial-scale=&amp;apos; + scale + &amp;apos;,maximum-scale=&amp;apos; + scale;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          docEle.firstElementChild.appendChild(metaEle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          var recalCulate = function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  var width = docEle.clientWidth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  if (width / dpr &amp;gt; 640) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      width = 640 * dpr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                docEle.style.fontSize = 20 * (width / 750) + &amp;apos;px&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          recalCulate()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          if (!doc.addEventListener) return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          win.addEventListener(resizeEvent, recalCulate, false);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)(document, window);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="web移动端" scheme="http://www.hxvin.me/tags/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>本地mysql客户端连接centos的数据库</title>
    <link href="http://www.hxvin.me/2017/10/01/%E6%9C%AC%E5%9C%B0mysql%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5centos%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.hxvin.me/2017/10/01/本地mysql客户端连接centos的数据库/</id>
    <published>2017-10-01T03:04:02.000Z</published>
    <updated>2017-10-15T13:05:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近觉得用终端修改centos数据库有点麻烦，所以用本地mysql客户端可视化</p>
<p>进入centos的数据库</p>
<blockquote>
<p>mysql -u root -h localhost -p</p>
</blockquote>
<p>使用数据库</p>
<blockquote>
<p>use mysql;</p>
</blockquote>
<p>赋予远程权限</p>
<blockquote>
<p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘password’ WITH GRANT OPTION;</p>
</blockquote>
<p>让权限立即生效</p>
<blockquote>
<p>flush privileges;</p>
</blockquote>
<p>–解释<br>其中root表示用户名，%表示所有的电脑都可以连接，也可以设置某个ip地址运行连接，password表示密码</p>
<p>然后在本地的mysql客户端连接</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近觉得用终端修改centos数据库有点麻烦，所以用本地mysql客户端可视化&lt;/p&gt;
&lt;p&gt;进入centos的数据库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql -u root -h localhost -p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用数据库&lt;
    
    </summary>
    
    
      <category term="开发记录总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>记录下node项目部署上线的过程及坑</title>
    <link href="http://www.hxvin.me/2017/09/15/%E8%AE%B0%E5%BD%95%E4%B8%8Bnode%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E7%9A%84%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%9D%91/"/>
    <id>http://www.hxvin.me/2017/09/15/记录下node项目部署上线的过程及坑/</id>
    <published>2017-09-15T02:11:32.000Z</published>
    <updated>2017-09-16T15:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个月利用空余时间写的xmxz在修了n多bug之后，在填了不少坑之后终于把他部署到云服务器上线了。对我这个技术菜简直就是挖坑，填坑，挖坑，填坑。。。。。。现在趁还记得一些，记录一下，免得下次忘了</p>
<h3 id="nodejs写爬虫，论坛系统"><a href="#nodejs写爬虫，论坛系统" class="headerlink" title="nodejs写爬虫，论坛系统"></a>nodejs写爬虫，论坛系统</h3><p>说到nodejs，肯定离不开异步，我在项目中用的是<br>promise+async/await这一套异步方案</p>
<p>async/await是写异步代码的新方式，以前的方法有回调函数和Promise。<br>async/await是基于Promise实现的，它不能用于普通的回调函数。<br>async/await与Promise一样，是非阻塞的。<br>async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</p>
<p><a href="https://www.zhihu.com/collection/119015788" target="_blank" rel="external">了解回调函数是什么</a></p>
<p><a href="https://www.zhihu.com/question/19732473/answer/20851256" target="_blank" rel="external">了解异步与同步，阻塞与非阻塞</a></p>
<p><a href="https://blog.fundebug.com/2017/04/04/nodejs-async-await/" target="_blank" rel="external">Async/Await替代Promise的6个理由</a></p>
<p><a href="https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6" target="_blank" rel="external">Async/Await详解</a></p>
<p>show code：</p>
<a id="more"></a>
<p>操作mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">let query = function( sql, values ) &#123;</div><div class="line"></div><div class="line">  return new Promise(( resolve, reject ) =&gt; &#123;</div><div class="line">    pool.getConnection(function(err, connection) &#123;</div><div class="line">      if (err) &#123;</div><div class="line">        resolve( err )</div><div class="line">      &#125; else &#123;</div><div class="line">        connection.query(sql, values, ( err, rows) =&gt; &#123;</div><div class="line"></div><div class="line">          if ( err ) &#123;</div><div class="line">            reject( err )</div><div class="line">          &#125; else &#123;</div><div class="line">            resolve( rows )</div><div class="line">          &#125;</div><div class="line">          connection.release()</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">let findDataByUser = function (  name ) &#123;</div><div class="line">  let _sql = `</div><div class="line">    SELECT * from posts</div><div class="line">      where name=&quot;$&#123;name&#125;&quot;</div><div class="line">      `</div><div class="line">  return query( _sql)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Post:async(ctx,next)=&gt;&#123;</div><div class="line">    if (ctx.request.querystring)</div><div class="line">	 &#123;				</div><div class="line"></div><div class="line">		await userModel.findDataByUser(decodeURIComponent(ctx.request.querystring.split(&apos;=&apos;)[1]))</div><div class="line">			.then(result=&gt;&#123;	</div><div class="line">					 var string=JSON.stringify(result); </div><div class="line">					   res=JSON.parse(string).reverse();</div><div class="line">			&#125;)</div><div class="line">		await ctx.render(&apos;post&apos;,&#123;</div><div class="line">				session:ctx.session,</div><div class="line">				posts:res	</div><div class="line">			&#125;)</div><div class="line">	&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="购买，部署云服务器"><a href="#购买，部署云服务器" class="headerlink" title="购买，部署云服务器"></a>购买，部署云服务器</h3><p>1.服务器购买<br>我买的是京东云的学生机，选的是centos7.2（国内用centos多一点）</p>
<p>2.服务器登陆<br>通过ssh方式登陆服务器<br>$ ssh root@192.168.1.112     //格式:ssh用户名@公网IP</p>
<p>3.<a href="https://help.aliyun.com/document_detail/50775.html" target="_blank" rel="external">部署nodejs</a>  / <a href="http://www.jb51.net/article/118493.htm" target="_blank" rel="external">部署nodejs</a><br>ps:部署node环境我使用NVM安装多版本</p>
<h3 id="上传项目文件"><a href="#上传项目文件" class="headerlink" title="上传项目文件"></a>上传项目文件</h3><p>我用的是FileZilla 这个ftp可视化客户端<br>直接去官网下载安装<br>然后输入主机名（你买的云服务器的公网ip） ，用户名（默认是root），密码（你设的云服务器密码）<br>还有端口22 。然后连接。<br>想上传啥直接拖拽就行了，记得先把项目里的node包删掉，不然文件数量<br>分分钟上万。。。。上传到猴年马月。</p>
<p>正确姿势-&gt;<br>删除node包，在云服务器中 npm i  </p>
<h3 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h3><p>如果想简单快速搞定mysql部署的可以用centos6.5<br>centos7以上的版本部署mysql有点麻烦<br>但是呢，对新鲜技术充满鸡血的我还是入坑centos7.2😂</p>
<p>1.确认你的系统环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cat /etc/redhat-release</div></pre></td></tr></table></figure>
<p>2.安装mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#yum install mysql</div><div class="line">#yum install mysql-devel</div><div class="line">#yum install mysql-server</div></pre></td></tr></table></figure>
<p>如果你是centos7以上版本，你会发现安装mysql-server会失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@yl-web yl]# yum install mysql-server</div><div class="line">Loaded plugins: fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: mirrors.sina.cn</div><div class="line"> * extras: mirrors.sina.cn</div><div class="line"> * updates: mirrors.sina.cn</div><div class="line">No package mysql-server available.</div><div class="line">Error: Nothing to do</div></pre></td></tr></table></figure>
<p>原因是CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。</p>
<blockquote>
<p>解决办法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class="line"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line"># yum install mysql-community-server</div></pre></td></tr></table></figure>
<p>安装成功后重启mysql服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service mysqld restart</div></pre></td></tr></table></figure>
<p>初次安装mysql，root账户没有密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@yl-web yl]# mysql -u root </div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.6.26 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| test               |</div><div class="line">+--------------------+</div><div class="line">4 rows in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>设置密码方案1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>不需要重启数据库即可生效。</p>
<p>设置密码方案2（此方案将提高mysql安全性）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysql_secure_installation</div></pre></td></tr></table></figure>
<p>这将提示您输入默认的根密码。一旦您输入，您将需要更改它。<br>接下去选择yes or no参考这个<a href="http://www.jb51.net/article/35426.htm" target="_blank" rel="external">连接</a></p>
<p>登录mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysql -u root -p</div></pre></td></tr></table></figure>
<p>输入密码</p>
<p>如果是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>则说明没问题了</p>
<p>最后mariadb自动替换了，将不再生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -qa |grep mariadb</div></pre></td></tr></table></figure>
<p>参考：<br><a href="https://www.howtoing.com/how-to-install-mysql-on-centos-7/" target="_blank" rel="external">文章1</a><br><a href="http://www.cnblogs.com/starof/p/4680083.html" target="_blank" rel="external">文章2</a></p>
<p>然后要修改mysql可以查这些语法<br><a href="http://www.cnblogs.com/719907411hl/p/6558987.html" target="_blank" rel="external">链接</a></p>
<p>附带一个定心丸，如果mysql安装失败了要先彻底删除mysql</p>
<p>用这方法-&gt; <a href="http://blog.duicode.com/1529.html" target="_blank" rel="external">centos下彻底删除MYSQL 和重新安装MYSQL</a></p>
<p>另外一个看起来还可以的<a href="http://www.jb51.net/article/107075.htm" target="_blank" rel="external">教程</a></p>
<p>这里我还用了pm2这个进程管理器，证进程永远都活着（刚好外加一些模块可以让我的爬虫程序每天定时爬取）<br>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js</div></pre></td></tr></table></figure>
<p>其他pm2<a href="http://www.nodeclass.com/articles/89283" target="_blank" rel="external">指令教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个月利用空余时间写的xmxz在修了n多bug之后，在填了不少坑之后终于把他部署到云服务器上线了。对我这个技术菜简直就是挖坑，填坑，挖坑，填坑。。。。。。现在趁还记得一些，记录一下，免得下次忘了&lt;/p&gt;
&lt;h3 id=&quot;nodejs写爬虫，论坛系统&quot;&gt;&lt;a href=&quot;#nodejs写爬虫，论坛系统&quot; class=&quot;headerlink&quot; title=&quot;nodejs写爬虫，论坛系统&quot;&gt;&lt;/a&gt;nodejs写爬虫，论坛系统&lt;/h3&gt;&lt;p&gt;说到nodejs，肯定离不开异步，我在项目中用的是&lt;br&gt;promise+async/await这一套异步方案&lt;/p&gt;
&lt;p&gt;async/await是写异步代码的新方式，以前的方法有回调函数和Promise。&lt;br&gt;async/await是基于Promise实现的，它不能用于普通的回调函数。&lt;br&gt;async/await与Promise一样，是非阻塞的。&lt;br&gt;async/await使得异步代码看起来像同步代码，这正是它的魔力所在。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/collection/119015788&quot;&gt;了解回调函数是什么&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/19732473/answer/20851256&quot;&gt;了解异步与同步，阻塞与非阻塞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.fundebug.com/2017/04/04/nodejs-async-await/&quot;&gt;Async/Await替代Promise的6个理由&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6&quot;&gt;Async/Await详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;show code：&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="NODE" scheme="http://www.hxvin.me/tags/NODE/"/>
    
      <category term="运维" scheme="http://www.hxvin.me/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>对付反爬虫战略</title>
    <link href="http://www.hxvin.me/2017/09/10/%E5%AF%B9%E4%BB%98%E5%8F%8D%E7%88%AC%E8%99%AB%E6%88%98%E7%95%A5/"/>
    <id>http://www.hxvin.me/2017/09/10/对付反爬虫战略/</id>
    <published>2017-09-10T15:50:00.000Z</published>
    <updated>2017-10-15T13:24:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>一开始我的反爬思路是这样的：</p>
<p>1.设置几秒请求一次（这边还可以对请求头处理假装浏览器访问）</p>
<p>2.对付验证码</p>
<p>接入打码平台。</p>
<p>下载验证码  上传验证码 </p>
<p>获取验证码字符  填写验证码</p>
<p>说起爬虫，真是磕磕绊绊…</p>
<a id="more"></a>
<p>前段时间想着即将成为大四狗了，校招如火如荼，本前端狗刚好学了点后端技术（nodejs，PHP），那就用技术做点有意义的事，爬虫爬取厦门地区的校招信息（大概完成）（之后再爬个宣讲信息），然后建个招聘信息发布（已完成），求职交流系统（已完成），然后再造一些求职工具（代做），如简历生成器。时间充沛的话用socket.ioc写一个求职线上交流平台（实习狗时间一直很捉急）。</p>
<p>讲了些有的没的，开始说爬虫过程。</p>
<p>首先，爬虫思路是这样，先把我要爬的网站打开，看想要爬什么，我是爬一个校招网站。先把该内容的首页的文章列表根据分类一个一个爬下来，其中你会看到里面可以爬到每篇文章的url，然后就是访问通过这些url，把每篇文章的具体内容爬取下来，接着就是存到数据库了。</p>
<p>思路是不是很简单？！这种菜鸟级别的爬虫适合我这菜鸟…第一次基本把近五百条具体内容爬下来了，很受鼓舞…不知道玩到第几次，忽然还没爬到一百条就挂了，刷新网站才知道，被怀疑是爬虫，需要填验证码。</p>
<p>好好好，验证码是吧，我去找解决办法，疯狂Google，总结如下，分免费的和付费的。免费的就是用Tesseract开源的OCR识别工具识别验证码，当然还需要graphicsmagick这个图像处理工具的辅助来提高基本的识别率，然并卵….清晰简单的验证码识别率还行，那个校招网站的验证码我试了下，正确率惨不忍睹….是可以去训练tesseract，提高相近字符的识别率…有大把空余时间了再说吧，前端大把东西等我去研究呢。付费的就是让打码平台帮你识别验证码，这个之后可以考虑。</p>
<p>实践一</p>
<p>当然，怎么可以一下子就屈服呢，至少要挣扎反抗到无力嘛。开始了反反爬虫，一开始，我有点小屈服，最新的校招信息能爬下来就行，甚至做了最后的退路—让用户直接点击链接跳转到具体的网，我就展示校招大体信息就好。之前写出来爬虫的效果是日期靠后的那些能爬下来，这个简单，用articleList.reverse()反转组数，这样就把最新的校招信息爬下来了，然而，只爬了六十几篇。。羞愧。。。</p>
<p>实践二</p>
<p>想想对方的反爬虫技术是根据啥来判断是爬虫然后弹出验证码，可能根据ip，短时间请求次数等等，相对更换不同IP地址，短时间请求次数实验成本更低。。然后我给爬虫程序加了定时器setTimeout()，6秒发送一次请求。结果爬了九十多篇。。。这么久爬一次竟然没啥用。。。不科学(<em>@ο@</em>) 。</p>
<p>实践三</p>
<p>换个思路，会不会除了对时间访问次数的判断，还加了如果相隔访问时间一致的话也被判为爬虫的判断？</p>
<p>那我发送请求的相隔时间就 随机嘛，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vartime=Math.floor(Math.random()*(6-1)+1);</div><div class="line"></div><div class="line">vardelay=time*1000;</div></pre></td></tr></table></figure>
<p>1-5秒随机发送请求。</p>
<p>结果。。。。可以了！！！！！</p>
<p>六百多（更新得越来越多了）篇文章全爬下来了</p>
<p>看来就是根据访问时间和频率来判断的。</p>
<p>以防ip被封，我把请求头</p>
<p>然后，爬虫总不能每天都手动去点爬虫开关吧，借用这两个第三方模块可以定时执行任务</p>
<p>varspawn=require(‘child_process’).spawn;</p>
<p>varcronJob=require(‘cron’).CronJob;</p>
<p>// 定时执行爬虫</p>
<p>exports.autoUpdate=’30 20 19 <em> </em> *’;// 每天19：20：30 执行一次任务</p>
<p>varjob=newcronJob(config.autoUpdate,function(){</p>
<p>console.log(‘开始执行定时更新任务’);</p>
<p>varupdate=spawn(process.execPath,[path.resolve(__dirname,’./model/all.js’)]);</p>
<p>update.stdout.pipe(process.stdout);</p>
<p>update.stderr.pipe(process.stderr);</p>
<p>update.on(‘close’,function(code) {</p>
<p>console.log(‘更新任务结束，代码=%d’, code);</p>
<p>});</p>
<p>});</p>
<p>job.start();</p>
<p>（本文完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始我的反爬思路是这样的：&lt;/p&gt;
&lt;p&gt;1.设置几秒请求一次（这边还可以对请求头处理假装浏览器访问）&lt;/p&gt;
&lt;p&gt;2.对付验证码&lt;/p&gt;
&lt;p&gt;接入打码平台。&lt;/p&gt;
&lt;p&gt;下载验证码  上传验证码 &lt;/p&gt;
&lt;p&gt;获取验证码字符  填写验证码&lt;/p&gt;
&lt;p&gt;说起爬虫，真是磕磕绊绊…&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="NODE" scheme="http://www.hxvin.me/tags/NODE/"/>
    
  </entry>
  
  <entry>
    <title>前后端开发，mvc模式</title>
    <link href="http://www.hxvin.me/2017/08/28/%E4%BA%86%E8%A7%A3%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%8Cmvc%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.hxvin.me/2017/08/28/了解前后端开发，mvc模式/</id>
    <published>2017-08-28T02:21:32.000Z</published>
    <updated>2017-09-16T08:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>实习两个月除了写前端，还写了点后端(nodejs，php)，前阶段自己也写了个前后端的项目，不过没开源。现在记录下自己对全端开发的个人心得(菜鸟入门级别的，错了请大佬们指导更正)。</p>
<p>感觉不管是php还是nodejs，都是差不多的，大概的作用是处理前端的数据请求，处理数据，操作数据库，把数据返回给前端。</p>
<p>用mvc模式去写一个全端站点。</p>
<a id="more"></a>
<p>mvc：模型（Model）、视图（View）和控制器（Controller）。<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png" alt="mvc"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-718dfa04e0488f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nodejs(koa)"></p>
<p>render(view,model)</p>
<p>model可以单独抽出来放一个文件夹</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-c7f05140b083e4ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="php(yii)"></p>
<p>这个就是吧model抽出来，调用model方法，返回数据，render到页面<br>。<br>和nodejs一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习两个月除了写前端，还写了点后端(nodejs，php)，前阶段自己也写了个前后端的项目，不过没开源。现在记录下自己对全端开发的个人心得(菜鸟入门级别的，错了请大佬们指导更正)。&lt;/p&gt;
&lt;p&gt;感觉不管是php还是nodejs，都是差不多的，大概的作用是处理前端的数据请求，处理数据，操作数据库，把数据返回给前端。&lt;/p&gt;
&lt;p&gt;用mvc模式去写一个全端站点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://www.hxvin.me/tags/JS/"/>
    
      <category term="PHP" scheme="http://www.hxvin.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>解决非chrome浏览器（移动端适用）后退刷新问题</title>
    <link href="http://www.hxvin.me/2017/08/08/%E8%A7%A3%E5%86%B3%E9%9D%9Echrome%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%88%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E7%94%A8%EF%BC%89%E5%90%8E%E9%80%80%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://www.hxvin.me/2017/08/08/解决非chrome浏览器（移动端适用）后退刷新问题/</id>
    <published>2017-08-08T02:10:32.000Z</published>
    <updated>2017-09-16T08:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>写页面时你可能会遇到这个问题，就是用Firefox，Safari，IE等非chrome浏览器，点击浏览器自带的返回键会发现不会刷新页面，因为那时js代码没有执行。</p>
<blockquote>
<p>在网上搜到的有的不能用，有的兼容性很差，故自己想了解决方法，核心是利用setInterval的特性。</p>
</blockquote>
<p>这样比如下面这种情形：<br>本来只建了一个二维码，新建了一个</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-63828908bed31df6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="E4294505-FFE4-473E-9316-5E32A64DB063.png"></p>
<p>新建完用户没有点击你写的返回按钮（图中的完成按钮），而是点击了浏览器自带的返回键</p>
<blockquote>
<p>图片中的chrome浏览器只是当演示用，现实中请用非chrome的去感受这个问题<br>比如<a href="http://www.topscan.com/dongtaima/dcode" target="_blank" rel="external">用firefox点击打开图片示例的网站链接</a></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-0e27f0d8813c94a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="736A09E5-D8C0-45E9-90CC-27F4AE5378B5.png"></p>
<p>结果回去页面没有刷新，结果显示还是原来的样子<br><img src="http://upload-images.jianshu.io/upload_images/5287253-a04bfa95d5a8602f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="736A09E5-D8C0-45E9-90CC-27F4AE5378B5.png"></p>
<p>而如果返回刷新了，会这样（用户体验会不会好些？）<br><img src="http://upload-images.jianshu.io/upload_images/5287253-8c6658785c2d8222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9F4837FE-BF66-437F-B2D7-67FE88229866.png"></p>
<p>奉上代码</p>
<blockquote>
<p>要刷新的页面（如页面A）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    //chrome自带后退刷新，故不再次刷新</div><div class="line">       var ua = window.navigator.userAgent; </div><div class="line">       var isChrome = ua.indexOf(&quot;Chrome&quot;) &amp;&amp; window.chrome;  </div><div class="line">       if (! isChrome) &#123;  </div><div class="line">    //浏览器后退刷新</div><div class="line">            function reload() &#123;</div><div class="line">                setInterval(function() &#123;   //这个定时器返回A页面会继续执行</div><div class="line">                    if (localStorage.reload == &apos;true&apos; ) &#123;  //判断是否刷新页面</div><div class="line">                        localStorage.setItem(&apos;reload&apos;,&apos;false&apos;);</div><div class="line">                        location.reload()</div><div class="line">                    &#125;</div><div class="line">                &#125;, 500)</div><div class="line">            &#125;;</div><div class="line">        reload();</div><div class="line">       &#125;  </div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>在A页面之后访问的页面（如页面B）添加一下一行代码<br>ps：作为A页面执行刷新功能的开关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(&apos;reload&apos;,&apos;true&apos;);</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写页面时你可能会遇到这个问题，就是用Firefox，Safari，IE等非chrome浏览器，点击浏览器自带的返回键会发现不会刷新页面，因为那时js代码没有执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在网上搜到的有的不能用，有的兼容性很差，故自己想了解决方法，核心是利用setInterval的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样比如下面这种情形：&lt;br&gt;本来只建了一个二维码，新建了一个&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="功能" scheme="http://www.hxvin.me/tags/%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>react版的抽奖程序&amp;滚动字幕(入门小demo)</title>
    <link href="http://www.hxvin.me/2017/07/18/react%E7%89%88%E7%9A%84%E6%8A%BD%E5%A5%96%E7%A8%8B%E5%BA%8F&amp;%E6%BB%9A%E5%8A%A8%E5%AD%97%E5%B9%95(%E5%85%A5%E9%97%A8%E5%B0%8Fdemo)/"/>
    <id>http://www.hxvin.me/2017/07/18/react版的抽奖程序&amp;滚动字幕(入门小demo)/</id>
    <published>2017-07-18T12:21:32.000Z</published>
    <updated>2017-09-16T08:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>因项目需求，需要写一个react的抽奖程序和字幕滚动。<br>本来之前用的是vue，没用过react，而项目组框架用的是react，萌新只能弃vue改学用react了</p>
<p>写完这个入门小demo，也算初识了下react。</p>
<blockquote>
<p>老习惯，写了详细的代码注释。</p>
</blockquote>
<p><a href="https://github.com/hxvin/draw" target="_blank" rel="external">demo地址</a></p>
<p>更新 ======================</p>
<a id="more"></a>
<p>a：增加了抽奖前的判断：</p>
<p>1.当天是否已抽过奖， ‘否’的话进入下一条判断<br>（这里用localstorage储存，获取当天24点时间戳，过了当天24点localstorage储存清除，时间都是获取本地时间，实际应用应采用服务器时间，防止用户修改本地时间来作弊）</p>
<p>2.现在抽奖时间是否在16-17点之间，‘是’的话则开始抽奖</p>
<p>b：增加了react版的字幕滚动</p>
<p><a href="http://ooytyiziz.bkt.clouddn.com/QQ20170715-193001-HD.gif" target="_blank" rel="external">最初版简陋抽奖gif图</a></p>
<p><a href="http://ooytyiziz.bkt.clouddn.com/draw.png" target="_blank" rel="external">抽奖&amp;字幕滚动图</a></p>
<h3 id="下载运行"><a href="#下载运行" class="headerlink" title="下载运行"></a>下载运行</h3><p>git  clone <a href="https://github.com/hxvin/draw.git" target="_blank" rel="external">https://github.com/hxvin/draw.git</a></p>
<p>cd draw</p>
<p>npm install</p>
<p>npm start</p>
<p>有错的或者不完善的地方恳请指出纠正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目需求，需要写一个react的抽奖程序和字幕滚动。&lt;br&gt;本来之前用的是vue，没用过react，而项目组框架用的是react，萌新只能弃vue改学用react了&lt;/p&gt;
&lt;p&gt;写完这个入门小demo，也算初识了下react。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;老习惯，写了详细的代码注释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hxvin/draw&quot;&gt;demo地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更新 ======================&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://www.hxvin.me/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="React" scheme="http://www.hxvin.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>从实际项目小谈react生命周期</title>
    <link href="http://www.hxvin.me/2017/07/15/%E4%BB%8E%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E5%B0%8F%E8%B0%88react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://www.hxvin.me/2017/07/15/从实际项目小谈react生命周期/</id>
    <published>2017-07-15T02:21:32.000Z</published>
    <updated>2017-10-15T13:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p> 今天写的一个react版的滚动字幕，思路是用js操作展示内容的scrollWidth,然后用setInterval 循环调用function ，function内容大体思路是对文字内容userDOM.style.transform = ‘translateX(-‘+ i +’px)’,每次横向左移动ipx的距离，形成滚动效果，当i&gt;=scrollWidth的时候，将i归零，形成循环滚动。(这里操作了dom，不是很好)</p>
<p>这里先解释一下浏览器scrollWidth，scrollWidth，offsetWidth三种宽度的区别<br>情况1：<br>元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。<br>scrollWidth=scrollWidth，两者皆为内容可视区的宽度。<br>offsetWidth为元素的实际宽度。<br>情况2：<br>元素的内容超过可视区，滚动条出现和可用的情况下。<br>scrollWidth&gt;clientWidth。<br>scrollWidth为实际内容的宽度。<br>clientWidth是内容可视区的宽度。<br>offsetWidth是元素的实际宽度。</p>
<a id="more"></a>
<h4 id="出问题了"><a href="#出问题了" class="headerlink" title="出问题了"></a>出问题了</h4><p>为了以便调用后端接口前先模拟展示，将静态生成的内容写死的文字内容换成动态加载，还采取了随机生成用户ip和获奖内容，结果获取到的scrollWidth（元素内容的实际宽度，包括被隐藏的部分）只是内容可视区的宽度，显然是不行的，所以无法滚动全部，我们需要的是元素内容的实际宽度。为什么会出现这种情况呢？如果文字内容是静态生成的，内容写死的，并不会出现这种问题。</p>
<h4 id="问题出在哪里？"><a href="#问题出在哪里？" class="headerlink" title="问题出在哪里？"></a>问题出在哪里？</h4><p>出在动态加载还要考虑到react的生命周期，componentWillMount(将要挂载)-&gt;render(dom渲染)-&gt;componentDidMount(已经挂载)，这个滚动函数写在了componentDidMount中，也就是页面dom结构渲染完了文字内容才开始动态生成，结果scrollWidth抓取到的文字内容是空的，只能获取了内容可视区的宽度。<br><img src="http://upload-images.jianshu.io/upload_images/5287253-1e0d1ec12f576c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网上找的一张react生命周期的好图"></p>
<h4 id="问题找出来了，该如何解决呢？"><a href="#问题找出来了，该如何解决呢？" class="headerlink" title="问题找出来了，该如何解决呢？"></a>问题找出来了，该如何解决呢？</h4><p>最简单粗暴的方式就是把动态加载文字内容的函数放在componentWillMount(将要挂载)中，在render页面之前就把该部分内容加载完毕，这样render页面的时候scrollWidth将抓取到早已加载好的文字内容了，可是这样会造成打开页面后，页面空白一会，在渲染出页面的内容来，这段空白期间就是componentWillMount加载你的数据内容去了。如果数据内容少还好说，万一量很大了，那就尴尬了，严重影响用户体验。</p>
<p>####更好的解决办法是<br>仍把动态加载文字内容的函数放在componentDidMount中，并在此采用window.onload 调用滚动函数，也就是等页面都渲染完了，文字内容也ok了，才会调用滚动函数（scrollWidth，setInterval，transform ）。</p>
<p>这下，解决了生命周期以及用户体验，加载性能的问题。😀</p>
<p>如有错误和不足，恳请指出指导^ ^</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt; 今天写的一个react版的滚动字幕，思路是用js操作展示内容的scrollWidth,然后用setInterval 循环调用function ，function内容大体思路是对文字内容userDOM.style.transform = ‘translateX(-‘+ i +’px)’,每次横向左移动ipx的距离，形成滚动效果，当i&amp;gt;=scrollWidth的时候，将i归零，形成循环滚动。(这里操作了dom，不是很好)&lt;/p&gt;
&lt;p&gt;这里先解释一下浏览器scrollWidth，scrollWidth，offsetWidth三种宽度的区别&lt;br&gt;情况1：&lt;br&gt;元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。&lt;br&gt;scrollWidth=scrollWidth，两者皆为内容可视区的宽度。&lt;br&gt;offsetWidth为元素的实际宽度。&lt;br&gt;情况2：&lt;br&gt;元素的内容超过可视区，滚动条出现和可用的情况下。&lt;br&gt;scrollWidth&amp;gt;clientWidth。&lt;br&gt;scrollWidth为实际内容的宽度。&lt;br&gt;clientWidth是内容可视区的宽度。&lt;br&gt;offsetWidth是元素的实际宽度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://www.hxvin.me/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="React" scheme="http://www.hxvin.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>js图片预加载</title>
    <link href="http://www.hxvin.me/2017/07/10/js%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    <id>http://www.hxvin.me/2017/07/10/js图片预加载/</id>
    <published>2017-07-10T12:21:32.000Z</published>
    <updated>2017-09-16T15:23:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一次的<a href="http://www.jianshu.com/p/52a85f91d070" target="_blank" rel="external">图片懒加载</a>，这次讲下js实现图片预加载。</p>
<blockquote>
<p>先上demo</p>
</blockquote>
<p><a href="http://www.hxvin.me/PracticeJS/preload/preload.html">demo:图片预加载</a></p>
<blockquote>
<p>再上代码</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        (function () &#123;</div><div class="line">            function loadImages(sources, callback) &#123;</div><div class="line">                var count = 0,</div><div class="line">                    images = &#123;&#125;,</div><div class="line">                    imgNum = 0;</div><div class="line">                for (src in sources) &#123;</div><div class="line">                    imgNum++;   //imgNum =2</div><div class="line">                &#125;</div><div class="line">                for (src in sources) &#123; //src 为 img1和img2</div><div class="line">                    images[src] = new Image();  //images = &#123;img1:img,img2:img&#125;</div><div class="line">                    images[src].onload = function () &#123; //onload 事件会在页面或图像加载完成后立即发生</div><div class="line">                        if (++count &gt;= imgNum) &#123; //当次数大于等于2次时</div><div class="line">                            callback(images);  //调用loadImages的回调函数</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    images[src].src = sources[src]; //img1-&gt; img.src = &quot;http://pic.58pic.com/58pic/17/18/97/01U58PIC4Xr_1024.jpg&quot;;img2同理</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            //存储图片链接信息的关联数组  </div><div class="line">            var sources = &#123; //想要多少张就放多少张</div><div class="line">                img1: &quot;http://pic.58pic.com/58pic/17/18/97/01U58PIC4Xr_1024.jpg&quot;,</div><div class="line">                img2: &quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;,</div><div class="line">                img3:&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot;</div><div class="line">            &#125;;</div><div class="line">            //调用图片预加载函数，实现回调函数  </div><div class="line">            loadImages(sources, function (images) &#123;</div><div class="line">                //TO-DO something  (如下面用canvas把图画出来)</div><div class="line">                //var images = new Image();   创建一个&lt;img&gt;元素</div><div class="line">                // images.src = &apos;myImage.png&apos;;  设置图片源地址</div><div class="line">                var canvas = document.getElementById(&apos;canvas&apos;);</div><div class="line">                var ctx = canvas.getContext(&apos;2d&apos;);</div><div class="line">                //ctx.drawImage(image, dx, dy, dWidth, dHeight);</div><div class="line">                ctx.drawImage(images.img1, 20, 20, 100, 100);</div><div class="line">                ctx.drawImage(images.img2, 140, 20, 100, 100); </div><div class="line">                ctx.drawImage(images.img3, 260, 20, 100, 100); </div><div class="line">            &#125;);</div><div class="line">        &#125;());</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;canvas id=&quot;canvas&quot; width=&quot;1000px&quot; height=&quot;1000px&quot;&gt;&lt;/canvas&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>可以看出代码注释很详细，<br>如果有些知识点还不是很清楚，请看我找的一些好的知识讲解文章,省得像我一样到处找啦；</p>
<p>同时，如果您觉得有点帮助，可以关注给我的github项目给个start，watch哦，我会不定期更新js的一些开发常用的知识点技能。</p>
<p><a href="https://github.com/hxvin/PracticeJS" target="_blank" rel="external">js开发常见技能收集-&gt;github</a></p>
<p><a href="http://www.w3school.com.cn/jsref/event_onload.asp" target="_blank" rel="external">onload</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="external">for in 遍历</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement/Image" target="_blank" rel="external">Image 元素构造器</a></p>
<p><a href="https://www.w3cplus.com/javascript/javascript-increment-and-decrement-operatorssass.html" target="_blank" rel="external">为何使用++count</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Using_images" target="_blank" rel="external">如何使用canvas创建图片</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="external">canvas的drawImage()</a></p>
<p>如有错误，恳请指出指导^ ^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一次的&lt;a href=&quot;http://www.jianshu.com/p/52a85f91d070&quot;&gt;图片懒加载&lt;/a&gt;，这次讲下js实现图片预加载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先上demo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hxvin.me/PracticeJS/preload/preload.html&quot;&gt;demo:图片预加载&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再上代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://www.hxvin.me/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="JS" scheme="http://www.hxvin.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>公司团队开发git分支管理</title>
    <link href="http://www.hxvin.me/2017/07/08/%E5%85%AC%E5%8F%B8%E5%9B%A2%E9%98%9F%E5%BC%80%E5%8F%91git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <id>http://www.hxvin.me/2017/07/08/公司团队开发git分支管理/</id>
    <published>2017-07-08T02:48:02.000Z</published>
    <updated>2017-07-08T03:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 从台湾回来那天刚好HR姐姐通知我隔天去公司面试，经过一下午四个面试官的面试之后(讲道理我司面试效率很高👍)，开心地收到公司的实习offer，现在懵逼地上了一周的班。。。。。懵逼的原因是自己太菜了。公司的前端要求具备全栈能力，而我不懂后端吗，所以增哥让我这几天学下php，yaf(php框架)，koa(node js框架)。然后就是熟悉团队开发流程，前端，后端，测试，运维。。。git分支管理代码提交。。。。等，新奇的一周，好多技术可以学，好开心，哈哈哈~~(这里着重感谢增哥大神不厌其烦地指导我)</p>
 <a id="more"></a>
<h2 id="git分支管理策略学习"><a href="#git分支管理策略学习" class="headerlink" title="git分支管理策略学习"></a>git分支管理策略学习</h2><p>这里可以看看廖雪峰老师写的教程，写得挺好的。<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758410364457b9e3d821f4244beb0fd69c61a185ae0000" target="_blank" rel="external">廖雪峰git分支管理策略</a></p>
<h2 id="我们的git分支管理流程"><a href="#我们的git分支管理流程" class="headerlink" title="我们的git分支管理流程"></a>我们的git分支管理流程</h2><p>git分支管理对团队协作开发真的好用，我们是这样做的。</p>
<p>1.把项目clone到本地，然后建一个自己的子分支，自己就在子分支上写你的代码；</p>
<p>2.写完了提交(commit)</p>
<p>3.把dev分支合并(merge)到自己的分支上看有没有冲突，这样如果有冲突就直接在自己的分支上解决掉</p>
<p>4.check out到dev分支，把自己没问题的分支合并(merge)到dev分支上</p>
<p>5.push dev分支</p>
<p>6.你的上级check一下，觉得没问题就合并到origin</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt; 从台湾回来那天刚好HR姐姐通知我隔天去公司面试，经过一下午四个面试官的面试之后(讲道理我司面试效率很高👍)，开心地收到公司的实习offer，现在懵逼地上了一周的班。。。。。懵逼的原因是自己太菜了。公司的前端要求具备全栈能力，而我不懂后端吗，所以增哥让我这几天学下php，yaf(php框架)，koa(node js框架)。然后就是熟悉团队开发流程，前端，后端，测试，运维。。。git分支管理代码提交。。。。等，新奇的一周，好多技术可以学，好开心，哈哈哈~~(这里着重感谢增哥大神不厌其烦地指导我)&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具使用" scheme="http://www.hxvin.me/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="实习日记" scheme="http://www.hxvin.me/tags/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>图片懒加载及节流函数优化性能</title>
    <link href="http://www.hxvin.me/2017/06/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8F%8A%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/"/>
    <id>http://www.hxvin.me/2017/06/24/图片懒加载及节流函数优化性能/</id>
    <published>2017-06-24T13:02:40.000Z</published>
    <updated>2017-06-25T04:14:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为啥要用图片懒加载"><a href="#为啥要用图片懒加载" class="headerlink" title="为啥要用图片懒加载"></a>为啥要用图片懒加载</h2><p>对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。当页面图片很多时，页面的加载速度缓慢，几S钟内页面没有加载完成，也许会失去很多的用户。<br>所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>将页面中的img标签src指向一张小图片或者src为空，然后定义data-src（这个属性可以自定义命名，我才用data-src）属性指向真实的图片。src指向一张默认的图片，否则当src为空时也会向服务器发送一次请求（指向默认的一张图那就只需请求一次）。可以指向loading的地址。</p>
<p>当载入页面时，先把可视区域内的img标签的data-src属性值负给src，然后监听滚动事件，把用户即将看到的图片加载。这样便实现了懒加载。</p>
<ul>
<li>ps：图片要指定宽高</li>
</ul>
<p>关于窗口各种宽度，给出网上找的一张好图</p>
<p><img src="http://ooytyiziz.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%84%E7%A7%8D%E5%AE%BD%E5%BA%A6.png" alt="各种宽度"></p>
<blockquote>
<p>如果仍不是很理解，看这两篇文章</p>
</blockquote>
<p><a href="http://www.cnblogs.com/kongxianghai/p/4192032.html" target="_blank" rel="external">scrollWidth,clientWidth,offsetWidth的区别</a></p>
<p><a href="http://www.cnblogs.com/fullhouse/archive/2012/01/16/2324131.html" target="_blank" rel="external">JS中关于clientWidth offsetWidth scrollWidth 等的含义</a></p>
<h2 id="图片懒加载的实现代码"><a href="#图片懒加载的实现代码" class="headerlink" title="图片懒加载的实现代码"></a>图片懒加载的实现代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        img &#123;</div><div class="line">            display: block;</div><div class="line">            margin-bottom: 50px;</div><div class="line">            width: 400px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">     &lt;img src=&quot;&quot; data-src=&quot;http://pic.58pic.com/58pic/17/18/97/01U58PIC4Xr_1024.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p01N203pHTU7/Wr5314kcLAtVCi.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://77fkxu.com1.z0.glb.clouddn.com/20160308/1457402219_73571.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://pic1.cxtuku.com/00/16/18/b3809a2ba0f3.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://img.bitscn.com/upimg/allimg/c150708/14363B06253120-6060O.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p015trgKM7vw/H0iyDPPneOVrA4.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://imgsrc.baidu.com/baike/pic/item/2f9cbdcc5e0bcf5c00e9283b.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    (function()&#123;</div><div class="line">    let num = document.getElementsByTagName(&apos;img&apos;).length;</div><div class="line">    let img = document.getElementsByTagName(&quot;img&quot;);</div><div class="line">    let n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历</div><div class="line">    lazyload(); //页面载入完毕加载可是区域内的图片</div><div class="line">     window.onscroll = lazyload;</div><div class="line">    function lazyload() &#123; //监听页面滚动事件</div><div class="line">        let seeHeight = document.documentElement.clientHeight; //可见区域高度</div><div class="line">        let scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //滚动条距离顶部高度</div><div class="line">        for (let i = n; i &lt; num; i++) &#123;</div><div class="line">            // 图片未出现时距离顶部的距离大于滚动条距顶部的距离+可视区的高度</div><div class="line">            if (img[i].offsetTop &lt; seeHeight + scrollTop) &#123;</div><div class="line">                if (img[i].getAttribute(&quot;src&quot;) == &quot;&quot;) &#123;</div><div class="line">                    img[i].src = img[i].getAttribute(&quot;data-src&quot;);</div><div class="line">                &#125;</div><div class="line">                n = i + 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;)()</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="使用节流函数进行优化"><a href="#使用节流函数进行优化" class="headerlink" title="使用节流函数进行优化"></a>使用节流函数进行优化</h2><p>如果直接将函数绑定在scroll事件上，当页面滚动时，函数会被高频触发，这非常影响浏览器的性能。</p>
<p>同时还有以下场景往往由于事件频繁被触发，因而频繁执行DOM操作、资源加载等重行为，导致UI停顿甚至浏览器崩溃。</p>
<p>1.window对象的resize、scroll事件</p>
<p>2.拖拽时的mousemove事件</p>
<p>3.射击游戏中的mousedown、keydown事件</p>
<p>4.文字输入、自动完成的keyup事件</p>
<p>解决这个问题的方法有去抖动和节流的方法</p>
<ul>
<li>去抖动原理： 当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。</li>
</ul>
<blockquote>
<p>不足:当我一直滚动鼠标的时候，lazyload函数就会不断被延迟，这样只有停下来的时候才会执行，那么再有些需要及时显示的情况下，就显得不那么友好了</p>
</blockquote>
<ul>
<li>节流原理：预设一个执行周期，如果这个周期结束了都还没触发函数，那就会执行一次函数；如果这个周期还没结束就触发了函数，那定时器将重置，开始新周期。</li>
</ul>
<blockquote>
<p>达到了想要的效果，既没有频繁的执行也没有延迟执行</p>
</blockquote>
<p>详细可看此文<br><a href="http://www.jianshu.com/p/4f3e2c8f5e95" target="_blank" rel="external">关于js函数节流和去抖动</a></p>
<h2 id="运用节流函数的图片懒加载代码"><a href="#运用节流函数的图片懒加载代码" class="headerlink" title="运用节流函数的图片懒加载代码"></a>运用节流函数的图片懒加载代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        img &#123;</div><div class="line">            display: block;</div><div class="line">            margin-bottom: 50px;</div><div class="line">            width: 400px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">     &lt;img src=&quot;&quot; data-src=&quot;http://pic.58pic.com/58pic/17/18/97/01U58PIC4Xr_1024.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p01N203pHTU7/Wr5314kcLAtVCi.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://77fkxu.com1.z0.glb.clouddn.com/20160308/1457402219_73571.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://pic1.cxtuku.com/00/16/18/b3809a2ba0f3.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://img.bitscn.com/upimg/allimg/c150708/14363B06253120-6060O.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p015trgKM7vw/H0iyDPPneOVrA4.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://imgsrc.baidu.com/baike/pic/item/2f9cbdcc5e0bcf5c00e9283b.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    (function()&#123;</div><div class="line">    let num = document.getElementsByTagName(&apos;img&apos;).length;</div><div class="line">    let img = document.getElementsByTagName(&quot;img&quot;);</div><div class="line">    let n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历</div><div class="line">    lazyload(); //页面载入完毕加载可是区域内的图片</div><div class="line">    function lazyload() &#123; //监听页面滚动事件</div><div class="line">        let seeHeight = document.documentElement.clientHeight; //可见区域高度</div><div class="line">        let scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //滚动条距离顶部高度</div><div class="line">        for (let i = n; i &lt; num; i++) &#123;</div><div class="line">            // 图片未出现时距离顶部的距离大于滚动条距顶部的距离+可视区的高度</div><div class="line">            if (img[i].offsetTop &lt; seeHeight + scrollTop) &#123;</div><div class="line">                if (img[i].getAttribute(&quot;src&quot;) == &quot;&quot;) &#123;</div><div class="line">                    img[i].src = img[i].getAttribute(&quot;data-src&quot;);</div><div class="line">                &#125;</div><div class="line">                n = i + 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    采用了节流函数</div><div class="line">        function throttle(fun, delay, time) &#123;</div><div class="line">    let timeout,</div><div class="line">        startTime = new Date();</div><div class="line">    return function() &#123;</div><div class="line">        let context = this,</div><div class="line">            args = arguments,</div><div class="line">            curTime = new Date();</div><div class="line">        clearTimeout(timeout);</div><div class="line">        // 如果达到了规定的触发时间间隔，触发 handler</div><div class="line">        if (curTime - startTime &gt;= time) &#123;</div><div class="line">            fun.apply(context, args);</div><div class="line">            startTime = curTime;</div><div class="line">            // 没达到触发间隔，重新设定定时器</div><div class="line">        &#125; else &#123;</div><div class="line">            timeout = setTimeout(fun, delay);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line">window.addEventListener(&apos;scroll&apos;,throttle(lazyload,500,1000));</div><div class="line">    &#125;)()</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为啥要用图片懒加载&quot;&gt;&lt;a href=&quot;#为啥要用图片懒加载&quot; class=&quot;headerlink&quot; title=&quot;为啥要用图片懒加载&quot;&gt;&lt;/a&gt;为啥要用图片懒加载&lt;/h2&gt;&lt;p&gt;对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。当页面图片很多时，页面的加载速度缓慢，几S钟内页面没有加载完成，也许会失去很多的用户。&lt;br&gt;所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://www.hxvin.me/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://www.hxvin.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js浅拷贝与深拷贝</title>
    <link href="http://www.hxvin.me/2017/06/18/js%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://www.hxvin.me/2017/06/18/js浅拷贝与深拷贝/</id>
    <published>2017-06-18T14:22:12.000Z</published>
    <updated>2017-09-16T15:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>深复制和浅复制只针对像 Object, Array 这样的复杂对象的。简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。</p>
<blockquote>
<p>浅拷贝</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; a:1, arr: [2,3] &#125;;</div><div class="line">var shallowObj = shallowCopy(obj);</div><div class="line"></div><div class="line">function shallowCopy(src) &#123;</div><div class="line">  var dst = &#123;&#125;;</div><div class="line">  for (var prop in src) &#123;</div><div class="line">    if (src.hasOwnProperty(prop)) &#123;</div><div class="line">      dst[prop] = src[prop];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>因为浅复制只会将对象的各个属性进行依次复制，并不会进行递归复制，而 JavaScript 存储对象都是存地址的，所以浅复制会导致 obj.arr 和 shallowObj.arr 指向同一块内存地址。</p>
<p>导致的结果就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shallowObj.arr[1] = 5;</div><div class="line">obj.arr[1]   // = 5</div></pre></td></tr></table></figure></p>
<p>深复制则不同，它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。</p>
<blockquote>
<p>深拷贝（这个函数可以深拷贝对象和数组）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var deepCopy = function(obj)&#123;</div><div class="line">    var str, newobj = obj.constructor === Array ? [] : &#123;&#125;;</div><div class="line">    if(typeof obj !== &apos;object&apos;)&#123;</div><div class="line">        return;</div><div class="line">    &#125; else if(window.JSON)&#123;</div><div class="line">        str = JSON.stringify(obj), //系列化对象</div><div class="line">        newobj = JSON.parse(str); //还原</div><div class="line">    &#125; else &#123;</div><div class="line">        for(var i in obj)&#123;</div><div class="line">            newobj[i] = typeof obj[i] === &apos;object&apos; ? </div><div class="line">            deepCopy(obj[i]) : obj[i]; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return newobj;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; a:1, arr: [1,2] &#125;;</div><div class="line">var deepObj = deepCopy(obj);</div><div class="line">deepObj.arr[1]=5;</div><div class="line">obj.arr[1]; //2</div></pre></td></tr></table></figure>
<p><a href="https://www.zhihu.com/question/23031215" target="_blank" rel="external">本文参考地址</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深复制和浅复制只针对像 Object, Array 这样的复杂对象的。简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浅拷贝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var obj = &amp;#123; a:1, arr: [2,3] &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var shallowObj = shallowCopy(obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function shallowCopy(src) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var dst = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for (var prop in src) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (src.hasOwnProperty(prop)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      dst[prop] = src[prop];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return dst;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://www.hxvin.me/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="JS" scheme="http://www.hxvin.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>图文解析HTMLElement.offsetHeight,scrollHeight,clientHeight</title>
    <link href="http://www.hxvin.me/2017/06/05/HTMLElement-offsetHeight-scrollHeight-clientHeight/"/>
    <id>http://www.hxvin.me/2017/06/05/HTMLElement-offsetHeight-scrollHeight-clientHeight/</id>
    <published>2017-06-05T14:32:29.000Z</published>
    <updated>2017-06-20T07:17:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTMLElement-offsetHeight"><a href="#HTMLElement-offsetHeight" class="headerlink" title="HTMLElement.offsetHeight"></a>HTMLElement.offsetHeight</h3><p>是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p>
<p>通常，元素的offsetHeight是一种衡量标准，包括元素的边框、垂直内边距和元素的水平滚动条（如果存在且渲染的话）和元素的CSS高度。</p>
<p>对于文档的主体对象，它包括代替元素的CSS高度线性总含量高。浮动元素的向下延伸内容高度是被忽略的。 </p>
<p><img src="https://developer.mozilla.org/@api/deki/files/788/=OffsetHeight.png" alt="实例"></p>
<a id="more"></a>
<h3 id="Element-scrollHeight"><a href="#Element-scrollHeight" class="headerlink" title="Element.scrollHeight"></a>Element.scrollHeight</h3><p>Element.scrollHeight 是计量元素内容高度的只读属性，包括overflow样式属性导致的视图中不可见内容。没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同。包括元素的padding，但不包括元素的margin.</p>
<p><img src="https://developer.mozilla.org/@api/deki/files/840/=ScrollHeight.png" alt="实例"></p>
<h3 id="Element-clientHeight"><a href="#Element-clientHeight" class="headerlink" title="Element.clientHeight"></a>Element.clientHeight</h3><p>返回元素内部的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距。</p>
<p>clientHeight 可以通过 CSS height + CSS padding - 水平滚动条高度 (如果存在)来计算.</p>
<p>也就是说，是没有垂直滚动条版本的scrollHeight。</p>
<hr>
<p>更新：</p>
<p>clientWidth = width + padding</p>
<p>clientHeight = height + padding</p>
<p>offsetWidth = width + padding + border</p>
<p>offsetHeight = height + padding + border</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTMLElement-offsetHeight&quot;&gt;&lt;a href=&quot;#HTMLElement-offsetHeight&quot; class=&quot;headerlink&quot; title=&quot;HTMLElement.offsetHeight&quot;&gt;&lt;/a&gt;HTMLElement.offsetHeight&lt;/h3&gt;&lt;p&gt;是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。&lt;/p&gt;
&lt;p&gt;通常，元素的offsetHeight是一种衡量标准，包括元素的边框、垂直内边距和元素的水平滚动条（如果存在且渲染的话）和元素的CSS高度。&lt;/p&gt;
&lt;p&gt;对于文档的主体对象，它包括代替元素的CSS高度线性总含量高。浮动元素的向下延伸内容高度是被忽略的。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.mozilla.org/@api/deki/files/788/=OffsetHeight.png&quot; alt=&quot;实例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://www.hxvin.me/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="HTML" scheme="http://www.hxvin.me/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>mac使用tree</title>
    <link href="http://www.hxvin.me/2017/05/30/mac%E4%BD%BF%E7%94%A8tree/"/>
    <id>http://www.hxvin.me/2017/05/30/mac使用tree/</id>
    <published>2017-05-30T05:53:43.000Z</published>
    <updated>2017-05-30T08:49:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、brew安装"><a href="#一、brew安装" class="headerlink" title="一、brew安装"></a>一、brew安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>然后一直按return键即可</p>
<h2 id="二、brew使用"><a href="#二、brew使用" class="headerlink" title="二、brew使用"></a>二、brew使用</h2><h3 id="brew安装套件："><a href="#brew安装套件：" class="headerlink" title="brew安装套件："></a>brew安装套件：</h3><blockquote>
<p>$ brew install tree</p>
</blockquote>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>$ tree -a          //显示所有文件和目录。</p>
<p>$ tree -d         //显示目录名称而非内容</p>
<p>$ tree -L 2      //这个命令是比较实用的，后面的数字2代表几层</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、brew安装&quot;&gt;&lt;a href=&quot;#一、brew安装&quot; class=&quot;headerlink&quot; title=&quot;一、brew安装&quot;&gt;&lt;/a&gt;一、brew安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
      <category term="工具使用" scheme="http://www.hxvin.me/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue2写单页面项目总结记录</title>
    <link href="http://www.hxvin.me/2017/05/29/post%E7%94%A8vue%E5%86%99webapp%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%971/"/>
    <id>http://www.hxvin.me/2017/05/29/post用vue写webapp项目总结系列1/</id>
    <published>2017-05-29T01:40:25.000Z</published>
    <updated>2017-09-16T08:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直想做个有数据内容的项目，刚好vue社区提供了API，在此感谢。<br>这是一个基于<code>vue+vue-cli+vue-router+axios+webpack</code>开发的vue社区<code>SPA</code>;UI用<code>Muse-UI</code>;css用<code>scss</code>，<code>flex</code>布局，<code>rem</code>做移动端适配，最终效果电脑端移动端都适配。<br><a id="more"></a></p>
<p>如果你和我一样用vue还挺生疏的，那好好做完这个项目，会学到很多东西，能有挺大的进步，还可以自己加功能，一起(๑•̀ㅂ•́)و✧加油。</p>
<p>如果对您有帮助，请给一个<code>star</code>鼓励一下萌新，感谢 ^ ^<br>如果您也是前端萌新，来互相follow互相学习，一起进步呀。</p>
<blockquote>
<p>建议先去社区<a href="https://www.vue-js.com/signup" target="_blank" rel="external">注册</a>拿accesstoken登录体验(注册可以直接用github账号，挺快的)</p>
</blockquote>
<p><a href="http://www.hxvin.me/vue-home/dist/">demo</a></p>
<p><a href="http://ooytyiziz.bkt.clouddn.com/vue-home.gif" target="_blank" rel="external">点击查看gif动图展示</a></p>
<p><a href="https://github.com/Hxvin/vue-home" target="_blank" rel="external">github项目地址</a> </p>
<p><a href="https://www.vue-js.com/api/" target="_blank" rel="external">项目API</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-ea6d4e5ec360acb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机扫描查看效果"></p>
<blockquote>
<p>完成功能</p>
</blockquote>
<ul>
<li>[x] 首页列表</li>
<li>[x] 下拉加载</li>
<li>[x] 用户信息（点击头像）</li>
<li>[x] 主题内容</li>
<li>[x] 登录功能</li>
<li>[x] 收藏（取消收藏）主题</li>
<li>[x] 评论列表</li>
<li>[x] 点赞（取消点赞）功能</li>
<li>[x] 消息中心（已读、未读）</li>
<li>[x] 个人中心</li>
<li>[x] 发表评论</li>
<li>[x] 回复评论</li>
<li>[x] 发布主题（支持markdown格式,可预览）</li>
</ul>
<blockquote>
<p>todo功能</p>
<ul>
<li>[ ] 左右侧滑</li>
<li>[ ] 搜索功能</li>
<li>[ ] vuex重构</li>
</ul>
</blockquote>
<h3 id="准备开发环境"><a href="#准备开发环境" class="headerlink" title="准备开发环境"></a>准备开发环境</h3><ul>
<li>$ npm install -g vue-cli </li>
<li>$ vue init webpack vue-home</li>
</ul>
<p><code>? Project name vue-home
? Project description vue-home
? Author afei
? Vue build standalone
? Install vue-router? Yes
? Use ESLint to lint your code? No
? Setup unit tests with Karma + Mocha? No
? Setup e2e tests with Nightwatch? No</code></p>
<ul>
<li>$ cd vue-home</li>
<li>$ npm install</li>
<li>$ npm run dev<br>等写完项目后</li>
<li>$ npm run build</li>
<li><blockquote>
<p>注意：npm run dev 之后 默认浏览器打开的是<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>  请换成<a href="http://localhost:8080/vue-home/dist" target="_blank" rel="external">http://localhost:8080/vue-home/dist</a><br>如果你电脑的8080端口被占用，请congfig/index.js中找到<code>port: 8080</code>修改成8081或者其他可用的端口</p>
</blockquote>
</li>
</ul>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">├── build</div><div class="line">│   ├── build.js</div><div class="line">│   ├── check-versions.js</div><div class="line">│   ├── dev-client.js</div><div class="line">│   ├── dev-server.js</div><div class="line">│   ├── utils.js</div><div class="line">│   ├── vue-loader.conf.js</div><div class="line">│   ├── webpack.base.conf.js</div><div class="line">│   ├── webpack.dev.conf.js</div><div class="line">│   └── webpack.prod.conf.js</div><div class="line">├── config</div><div class="line">│   ├── dev.env.js</div><div class="line">│   ├── index.js</div><div class="line">│   └── prod.env.js</div><div class="line">├── dist                  //等写完项目后 $ npm run build 的打包文件</div><div class="line">│   ├── index.html</div><div class="line">│   └── static</div><div class="line">├── index.html            //首页入口文件</div><div class="line">├── node_modules</div><div class="line">├── package.json          </div><div class="line">├── src</div><div class="line">│   ├── App.vue           //项目入口文件</div><div class="line">│   ├── assets</div><div class="line">│   │   ├── 1495982696.png  //手机扫描二维码</div><div class="line">│   │   ├── logo.png        //vue logo</div><div class="line">│   │   └── sass            //sass通用样式</div><div class="line">│   ├── components          //组件</div><div class="line">│   │   ├── FooterNav.vue   //底部nav组件</div><div class="line">│   │   ├── HeaderBar.vue   //顶部横条</div><div class="line">│   │   ├── HeaderTabs.vue  //顶部tabs组件&amp;主页面内容拉取</div><div class="line">│   │   └── Hello.vue        </div><div class="line">│   ├── main.js             //核心文件 在这里引入了Muse UI 时间过滤器</div><div class="line">│   ├── pages               //页面</div><div class="line">│   │   ├── content.vue     //帖子内容页面  </div><div class="line">│   │   ├── index.vue       //首页</div><div class="line">│   │   ├── login.vue       //登录页面</div><div class="line">│   │   ├── message.vue     //信息通知页面</div><div class="line">│   │   ├── more.vue        </div><div class="line">│   │   ├── my.vue          //个人信息页面</div><div class="line">│   │   ├── people.vue      //社区用户信息页面</div><div class="line">│   │   └── publish.vue     //发布帖子页面(此页面还没写完)</div><div class="line">│   ├── router              //路由与组件配置</div><div class="line">│   │   └── index.js </div><div class="line">│   └── util                //时间过滤器，转换时间格式</div><div class="line">│       └── filter.js</div><div class="line">└── static</div></pre></td></tr></table></figure>
<h4 id="vue-home-config-index-js"><a href="#vue-home-config-index-js" class="headerlink" title="vue-home/config/index.js"></a>vue-home/config/index.js</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-30138bb5cd33b265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-home/config/index.js图"></p>
<p><code>assetsPublicPath: &#39;/vue-home/dist&#39;</code></p>
<blockquote>
<p>这个公共路径原本为assetsPublicPath: ‘/‘，这样在本地服务器是可以跑，可是打包上传到github后会发现打开的页面是空白的，报错如下图。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-82edc72f02251f48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网页加载报错图"></p>
<p>原因是路径错了，vue-home是项目文件夹名称，dist是npm run build之后出现的文件夹，github上线就是读取dist文件夹而生成的网页（成功展示的demo地址长这样：<a href="http://www.hxvin.me/vue-home/dist/）">http://www.hxvin.me/vue-home/dist/）</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-86ca75ba374431a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github图"></p>
<p>解决上线路径问题不知道还有没有其他更方便的解决方法，如果有，请跟我讲下哦</p>
<blockquote>
<p>port: 8080 这个是让你改端口的</p>
</blockquote>
<h4 id="vue-home-src-App-vue"><a href="#vue-home-src-App-vue" class="headerlink" title="vue-home/src/App.vue"></a>vue-home/src/App.vue</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-711de34d2a7e98b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-home/src/App.vue图"></p>
<p>rem适配移动端，1rem=10px</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">html&#123;</div><div class="line">  font-size: 62.5%;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建议注释掉这段，不然会然干扰后面的css</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/*text-align: center;*/</div><div class="line">/*color: #2c3e50;</div><div class="line">margin-top: 60px;*/</div></pre></td></tr></table></figure>
<h4 id="vue-home-index-html"><a href="#vue-home-index-html" class="headerlink" title="/vue-home/index.html"></a>/vue-home/index.html</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-6c3ef9e8a11a259b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="/vue-home/index.html图"></p>
<p>我们是做的移动端，适配web端，所以在index.html里面加上meta</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=0&quot;&gt;</div></pre></td></tr></table></figure>
<p>用MuseUI的添加之一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="vue-home-src-main-js"><a href="#vue-home-src-main-js" class="headerlink" title="vue-home/src/main.js"></a>vue-home/src/main.js</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-6dbc7c159543aefc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-home/src/main.js图"></p>
<p>图中有标识了哪些是用来干嘛的，分别是用MuseUI的添加之一；filters是用来把社区api数据中的时间格式转换成<code>*分钟前``*小时前``*天前</code></p>
<h4 id="关于新建主题功能"><a href="#关于新建主题功能" class="headerlink" title="关于新建主题功能"></a>关于新建主题功能</h4><p>api上写了需post</p>
<p>title String 标题</p>
<p>tab String 目前有 ask share job</p>
<p>content String 主体内容</p>
<ul>
<li>记得还需要传递accesstoken的参数，不然会报403错误（资源不可用）</li>
</ul>
<p>markdown格式支持 直接 npm install marked –save  用法详见代码</p>
<p>（代码好像用文章不方便介绍，我很详细地写了代码注释哦^_^）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一直想做个有数据内容的项目，刚好vue社区提供了API，在此感谢。&lt;br&gt;这是一个基于&lt;code&gt;vue+vue-cli+vue-router+axios+webpack&lt;/code&gt;开发的vue社区&lt;code&gt;SPA&lt;/code&gt;;UI用&lt;code&gt;Muse-UI&lt;/code&gt;;css用&lt;code&gt;scss&lt;/code&gt;，&lt;code&gt;flex&lt;/code&gt;布局，&lt;code&gt;rem&lt;/code&gt;做移动端适配，最终效果电脑端移动端都适配。&lt;br&gt;
    
    </summary>
    
    
      <category term="vue2" scheme="http://www.hxvin.me/tags/vue2/"/>
    
      <category term="项目总结" scheme="http://www.hxvin.me/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
