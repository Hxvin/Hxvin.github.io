<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hxvin的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-16T15:10:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hxvin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录下node项目部署上线的过程及坑</title>
    <link href="http://yoursite.com/2017/09/15/%E8%AE%B0%E5%BD%95%E4%B8%8Bnode%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E7%9A%84%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%9D%91/"/>
    <id>http://yoursite.com/2017/09/15/记录下node项目部署上线的过程及坑/</id>
    <published>2017-09-15T02:11:32.000Z</published>
    <updated>2017-09-16T15:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个月利用空余时间写的xmxz在修了n多bug之后，在填了不少坑之后终于把他部署到云服务器上线了。对我这个技术菜简直就是挖坑，填坑，挖坑，填坑。。。。。。现在趁还记得一些，记录一下，免得下次忘了</p>
<h3 id="nodejs写爬虫，论坛系统"><a href="#nodejs写爬虫，论坛系统" class="headerlink" title="nodejs写爬虫，论坛系统"></a>nodejs写爬虫，论坛系统</h3><p>说到nodejs，肯定离不开异步，我在项目中用的是<br>promise+async/await这一套异步方案</p>
<p>async/await是写异步代码的新方式，以前的方法有回调函数和Promise。<br>async/await是基于Promise实现的，它不能用于普通的回调函数。<br>async/await与Promise一样，是非阻塞的。<br>async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</p>
<p><a href="https://www.zhihu.com/collection/119015788" target="_blank" rel="external">了解回调函数是什么</a></p>
<p><a href="https://www.zhihu.com/question/19732473/answer/20851256" target="_blank" rel="external">了解异步与同步，阻塞与非阻塞</a></p>
<p><a href="https://blog.fundebug.com/2017/04/04/nodejs-async-await/" target="_blank" rel="external">Async/Await替代Promise的6个理由</a></p>
<p><a href="https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6" target="_blank" rel="external">Async/Await详解</a></p>
<p>show code：</p>
<a id="more"></a>
<p>操作mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">let query = function( sql, values ) &#123;</div><div class="line"></div><div class="line">  return new Promise(( resolve, reject ) =&gt; &#123;</div><div class="line">    pool.getConnection(function(err, connection) &#123;</div><div class="line">      if (err) &#123;</div><div class="line">        resolve( err )</div><div class="line">      &#125; else &#123;</div><div class="line">        connection.query(sql, values, ( err, rows) =&gt; &#123;</div><div class="line"></div><div class="line">          if ( err ) &#123;</div><div class="line">            reject( err )</div><div class="line">          &#125; else &#123;</div><div class="line">            resolve( rows )</div><div class="line">          &#125;</div><div class="line">          connection.release()</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">let findDataByUser = function (  name ) &#123;</div><div class="line">  let _sql = `</div><div class="line">    SELECT * from posts</div><div class="line">      where name=&quot;$&#123;name&#125;&quot;</div><div class="line">      `</div><div class="line">  return query( _sql)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Post:async(ctx,next)=&gt;&#123;</div><div class="line">    if (ctx.request.querystring)</div><div class="line">	 &#123;				</div><div class="line"></div><div class="line">		await userModel.findDataByUser(decodeURIComponent(ctx.request.querystring.split(&apos;=&apos;)[1]))</div><div class="line">			.then(result=&gt;&#123;	</div><div class="line">					 var string=JSON.stringify(result); </div><div class="line">					   res=JSON.parse(string).reverse();</div><div class="line">			&#125;)</div><div class="line">		await ctx.render(&apos;post&apos;,&#123;</div><div class="line">				session:ctx.session,</div><div class="line">				posts:res	</div><div class="line">			&#125;)</div><div class="line">	&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="购买，部署云服务器"><a href="#购买，部署云服务器" class="headerlink" title="购买，部署云服务器"></a>购买，部署云服务器</h3><p>1.服务器购买<br>我买的是京东云的学生机，选的是centos7.2（国内用centos多一点）</p>
<p>2.服务器登陆<br>通过ssh方式登陆服务器<br>$ ssh root@192.168.1.112     //格式:ssh用户名@公网IP</p>
<p>3.<a href="https://help.aliyun.com/document_detail/50775.html" target="_blank" rel="external">部署nodejs</a>  / <a href="http://www.jb51.net/article/118493.htm" target="_blank" rel="external">部署nodejs</a><br>ps:部署node环境我使用NVM安装多版本</p>
<h3 id="上传项目文件"><a href="#上传项目文件" class="headerlink" title="上传项目文件"></a>上传项目文件</h3><p>我用的是FileZilla 这个ftp可视化客户端<br>直接去官网下载安装<br>然后输入主机名（你买的云服务器的公网ip） ，用户名（默认是root），密码（你设的云服务器密码）<br>还有端口22 。然后连接。<br>想上传啥直接拖拽就行了，记得先把项目里的node包删掉，不然文件数量<br>分分钟上万。。。。上传到猴年马月。</p>
<p>正确姿势-&gt;<br>删除node包，在云服务器中 npm i  </p>
<h3 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h3><p>如果想简单快速搞定mysql部署的可以用centos6.5<br>centos7以上的版本部署mysql有点麻烦<br>但是呢，对新鲜技术充满鸡血的我还是入坑centos7.2😂</p>
<p>1.确认你的系统环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cat /etc/redhat-release</div></pre></td></tr></table></figure>
<p>2.安装mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#yum install mysql</div><div class="line">#yum install mysql-devel</div><div class="line">#yum install mysql-server</div></pre></td></tr></table></figure>
<p>如果你是centos7以上版本，你会发现安装mysql-server会失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@yl-web yl]# yum install mysql-server</div><div class="line">Loaded plugins: fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: mirrors.sina.cn</div><div class="line"> * extras: mirrors.sina.cn</div><div class="line"> * updates: mirrors.sina.cn</div><div class="line">No package mysql-server available.</div><div class="line">Error: Nothing to do</div></pre></td></tr></table></figure>
<p>原因是CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。</p>
<blockquote>
<p>解决办法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class="line"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line"># yum install mysql-community-server</div></pre></td></tr></table></figure>
<p>安装成功后重启mysql服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service mysqld restart</div></pre></td></tr></table></figure>
<p>初次安装mysql，root账户没有密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@yl-web yl]# mysql -u root </div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.6.26 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| test               |</div><div class="line">+--------------------+</div><div class="line">4 rows in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>设置密码方案1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>不需要重启数据库即可生效。</p>
<p>设置密码方案2（此方案将提高mysql安全性）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysql_secure_installation</div></pre></td></tr></table></figure>
<p>这将提示您输入默认的根密码。一旦您输入，您将需要更改它。<br>接下去选择yes or no参考这个<a href="http://www.jb51.net/article/35426.htm" target="_blank" rel="external">连接</a></p>
<p>登录mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysql -u root -p</div></pre></td></tr></table></figure>
<p>输入密码</p>
<p>如果是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>则说明没问题了</p>
<p>最后mariadb自动替换了，将不再生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -qa |grep mariadb</div></pre></td></tr></table></figure>
<p>参考：<br><a href="https://www.howtoing.com/how-to-install-mysql-on-centos-7/" target="_blank" rel="external">文章1</a><br><a href="http://www.cnblogs.com/starof/p/4680083.html" target="_blank" rel="external">文章2</a></p>
<p>然后要修改mysql可以查这些语法<br><a href="http://www.cnblogs.com/719907411hl/p/6558987.html" target="_blank" rel="external">链接</a></p>
<p>附带一个定心丸，如果mysql安装失败了要先彻底删除mysql</p>
<p>用这方法-&gt; <a href="http://blog.duicode.com/1529.html" target="_blank" rel="external">centos下彻底删除MYSQL 和重新安装MYSQL</a></p>
<p>另外一个看起来还可以的<a href="http://www.jb51.net/article/107075.htm" target="_blank" rel="external">教程</a></p>
<p>这里我还用了pm2这个进程管理器，证进程永远都活着（刚好外加一些模块可以让我的爬虫程序每天定时爬取）<br>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js</div></pre></td></tr></table></figure>
<p>其他pm2<a href="http://www.nodeclass.com/articles/89283" target="_blank" rel="external">指令教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个月利用空余时间写的xmxz在修了n多bug之后，在填了不少坑之后终于把他部署到云服务器上线了。对我这个技术菜简直就是挖坑，填坑，挖坑，填坑。。。。。。现在趁还记得一些，记录一下，免得下次忘了&lt;/p&gt;
&lt;h3 id=&quot;nodejs写爬虫，论坛系统&quot;&gt;&lt;a href=&quot;#nodejs写爬虫，论坛系统&quot; class=&quot;headerlink&quot; title=&quot;nodejs写爬虫，论坛系统&quot;&gt;&lt;/a&gt;nodejs写爬虫，论坛系统&lt;/h3&gt;&lt;p&gt;说到nodejs，肯定离不开异步，我在项目中用的是&lt;br&gt;promise+async/await这一套异步方案&lt;/p&gt;
&lt;p&gt;async/await是写异步代码的新方式，以前的方法有回调函数和Promise。&lt;br&gt;async/await是基于Promise实现的，它不能用于普通的回调函数。&lt;br&gt;async/await与Promise一样，是非阻塞的。&lt;br&gt;async/await使得异步代码看起来像同步代码，这正是它的魔力所在。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/collection/119015788&quot;&gt;了解回调函数是什么&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/19732473/answer/20851256&quot;&gt;了解异步与同步，阻塞与非阻塞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.fundebug.com/2017/04/04/nodejs-async-await/&quot;&gt;Async/Await替代Promise的6个理由&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6&quot;&gt;Async/Await详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;show code：&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="NODE" scheme="http://yoursite.com/tags/NODE/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>对付反爬虫战略</title>
    <link href="http://yoursite.com/2017/09/10/%E5%AF%B9%E4%BB%98%E5%8F%8D%E7%88%AC%E8%99%AB%E6%88%98%E7%95%A5/"/>
    <id>http://yoursite.com/2017/09/10/对付反爬虫战略/</id>
    <published>2017-09-10T15:50:00.000Z</published>
    <updated>2017-09-16T08:43:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>反爬思路：</p>
<p>1.设置10s请求一次（这边还可以对请求头处理假装浏览器访问）</p>
<p>500个请求</p>
<p>1.4个小时，还行，对请求数量不多刚好可用</p>
<p>2.对付验证码</p>
<p>接入打码平台。</p>
<p>下载验证码  上传验证码 </p>
<p>获取验证码字符  填写验证码</p>
<p>说起爬虫，真是磕磕绊绊…</p>
<a id="more"></a>
<p>前段时间想着即将成为大四狗了，校招如火如荼，本前端狗刚好学了点后端技术（nodejs，PHP），那就用技术做点有意义的事，爬虫爬取厦门地区的校招信息（大概完成）（之后再爬个宣讲信息），然后建个招聘信息发布（已完成），求职交流系统（已完成），然后再造一些求职工具（代做），如简历生成器。时间充沛的话用socket.ioc写一个求职线上交流平台（实习狗时间一直很捉急）。</p>
<p>讲了些有的没的，开始说爬虫过程。</p>
<p>首先，爬虫思路是这样，先把我要爬的网站打开，看想要爬什么，我是爬一个校招网站。先把该内容的首页的文章列表根据分类一个一个爬下来，其中你会看到里面可以爬到每篇文章的url，然后就是访问通过这些url，把每篇文章的具体内容爬取下来，接着就是存到数据库了。</p>
<p>思路是不是很简单？！这种菜鸟级别的爬虫适合我这菜鸟…第一次基本把近五百条具体内容爬下来了，很受鼓舞…不知道玩到第几次，忽然还没爬到一百条就挂了，刷新网站才知道，被怀疑是爬虫，需要填验证码。</p>
<p>好好好，验证码是吧，我去找解决办法，疯狂Google，总结如下，分免费的和付费的。免费的就是用Tesseract开源的OCR识别工具识别验证码，当然还需要graphicsmagick这个图像处理工具的辅助来提高基本的识别率，然并卵….清晰简单的验证码识别率还行，那个校招网站的验证码我试了下，正确率惨不忍睹….是可以去训练tesseract，提高相近字符的识别率…有大把空余时间了再说吧，前端大把东西等我去研究呢。付费的就是让打码平台帮你识别验证码，这个之后可以考虑。</p>
<p>实践一</p>
<p>当然，怎么可以一下子就屈服呢，至少要挣扎反抗到无力嘛。开始了反反爬虫，一开始，我有点小屈服，最新的校招信息能爬下来就行，甚至做了最后的退路—让用户直接点击链接跳转到具体的网，我就展示校招大体信息就好。之前写出来爬虫的效果是日期靠后的那些能爬下来，这个简单，用articleList.reverse()反转组数，这样就把最新的校招信息爬下来了，然而，只爬了六十几篇。。羞愧。。。</p>
<p>实践二</p>
<p>想想对方的反爬虫技术是根据啥来判断是爬虫然后弹出验证码，可能根据ip，短时间请求次数等等，相对更换不同IP地址，短时间请求次数实验成本更低。。然后我给爬虫程序加了定时器setTimeout()，6秒发送一次请求。结果爬了九十多篇。。。这么久爬一次竟然没啥用。。。不科学(<em>@ο@</em>) 。</p>
<p>实践三</p>
<p>换个思路，会不会除了对时间访问次数的判断，还加了如果相隔访问时间一致的话也被判为爬虫的判断？</p>
<p>那我发送请求的相隔时间就 随机嘛，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vartime=Math.floor(Math.random()*(6-1)+1);</div><div class="line"></div><div class="line">vardelay=time*1000;</div></pre></td></tr></table></figure>
<p>1-5秒随机发送请求。</p>
<p>结果。。。。可以了！！！！！</p>
<p>六百多（更新得越来越多了）篇文章全爬下来了</p>
<p>看来就是根据访问时间和频率来判断的。</p>
<p>以防ip被封，我把请求头</p>
<p>然后，爬虫总不能每天都手动去点爬虫开关吧，借用这两个第三方模块可以定时执行任务</p>
<p>varspawn=require(‘child_process’).spawn;</p>
<p>varcronJob=require(‘cron’).CronJob;</p>
<p>// 定时执行爬虫</p>
<p>exports.autoUpdate=’30 20 19 <em> </em> *’;// 每天19：20：30 执行一次任务</p>
<p>varjob=newcronJob(config.autoUpdate,function(){</p>
<p>console.log(‘开始执行定时更新任务’);</p>
<p>varupdate=spawn(process.execPath,[path.resolve(__dirname,’./model/all.js’)]);</p>
<p>update.stdout.pipe(process.stdout);</p>
<p>update.stderr.pipe(process.stderr);</p>
<p>update.on(‘close’,function(code) {</p>
<p>console.log(‘更新任务结束，代码=%d’, code);</p>
<p>});</p>
<p>});</p>
<p>job.start();</p>
<p>（本文完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反爬思路：&lt;/p&gt;
&lt;p&gt;1.设置10s请求一次（这边还可以对请求头处理假装浏览器访问）&lt;/p&gt;
&lt;p&gt;500个请求&lt;/p&gt;
&lt;p&gt;1.4个小时，还行，对请求数量不多刚好可用&lt;/p&gt;
&lt;p&gt;2.对付验证码&lt;/p&gt;
&lt;p&gt;接入打码平台。&lt;/p&gt;
&lt;p&gt;下载验证码  上传验证码 &lt;/p&gt;
&lt;p&gt;获取验证码字符  填写验证码&lt;/p&gt;
&lt;p&gt;说起爬虫，真是磕磕绊绊…&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="NODE" scheme="http://yoursite.com/tags/NODE/"/>
    
  </entry>
  
  <entry>
    <title>前后端开发，mvc模式</title>
    <link href="http://yoursite.com/2017/08/28/%E4%BA%86%E8%A7%A3%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%8Cmvc%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/28/了解前后端开发，mvc模式/</id>
    <published>2017-08-28T02:21:32.000Z</published>
    <updated>2017-09-16T08:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>实习两个月除了写前端，还写了点后端(nodejs，php)，前阶段自己也写了个前后端的项目，不过没开源。现在记录下自己对全端开发的个人心得(菜鸟入门级别的，错了请大佬们指导更正)。</p>
<p>感觉不管是php还是nodejs，都是差不多的，大概的作用是处理前端的数据请求，处理数据，操作数据库，把数据返回给前端。</p>
<p>用mvc模式去写一个全端站点。</p>
<a id="more"></a>
<p>mvc：模型（Model）、视图（View）和控制器（Controller）。<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png" alt="mvc"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-718dfa04e0488f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nodejs(koa)"></p>
<p>render(view,model)</p>
<p>model可以单独抽出来放一个文件夹</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-c7f05140b083e4ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="php(yii)"></p>
<p>这个就是吧model抽出来，调用model方法，返回数据，render到页面<br>。<br>和nodejs一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习两个月除了写前端，还写了点后端(nodejs，php)，前阶段自己也写了个前后端的项目，不过没开源。现在记录下自己对全端开发的个人心得(菜鸟入门级别的，错了请大佬们指导更正)。&lt;/p&gt;
&lt;p&gt;感觉不管是php还是nodejs，都是差不多的，大概的作用是处理前端的数据请求，处理数据，操作数据库，把数据返回给前端。&lt;/p&gt;
&lt;p&gt;用mvc模式去写一个全端站点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>解决非chrome浏览器（移动端适用）后退刷新问题</title>
    <link href="http://yoursite.com/2017/08/08/%E8%A7%A3%E5%86%B3%E9%9D%9Echrome%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%88%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E7%94%A8%EF%BC%89%E5%90%8E%E9%80%80%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/08/08/解决非chrome浏览器（移动端适用）后退刷新问题/</id>
    <published>2017-08-08T02:10:32.000Z</published>
    <updated>2017-09-16T08:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>写页面时你可能会遇到这个问题，就是用Firefox，Safari，IE等非chrome浏览器，点击浏览器自带的返回键会发现不会刷新页面，因为那时js代码没有执行。</p>
<blockquote>
<p>在网上搜到的有的不能用，有的兼容性很差，故自己想了解决方法，核心是利用setInterval的特性。</p>
</blockquote>
<p>这样比如下面这种情形：<br>本来只建了一个二维码，新建了一个</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-63828908bed31df6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="E4294505-FFE4-473E-9316-5E32A64DB063.png"></p>
<p>新建完用户没有点击你写的返回按钮（图中的完成按钮），而是点击了浏览器自带的返回键</p>
<blockquote>
<p>图片中的chrome浏览器只是当演示用，现实中请用非chrome的去感受这个问题<br>比如<a href="http://www.topscan.com/dongtaima/dcode" target="_blank" rel="external">用firefox点击打开图片示例的网站链接</a></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-0e27f0d8813c94a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="736A09E5-D8C0-45E9-90CC-27F4AE5378B5.png"></p>
<p>结果回去页面没有刷新，结果显示还是原来的样子<br><img src="http://upload-images.jianshu.io/upload_images/5287253-a04bfa95d5a8602f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="736A09E5-D8C0-45E9-90CC-27F4AE5378B5.png"></p>
<p>而如果返回刷新了，会这样（用户体验会不会好些？）<br><img src="http://upload-images.jianshu.io/upload_images/5287253-8c6658785c2d8222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9F4837FE-BF66-437F-B2D7-67FE88229866.png"></p>
<p>奉上代码</p>
<blockquote>
<p>要刷新的页面（如页面A）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    //chrome自带后退刷新，故不再次刷新</div><div class="line">       var ua = window.navigator.userAgent; </div><div class="line">       var isChrome = ua.indexOf(&quot;Chrome&quot;) &amp;&amp; window.chrome;  </div><div class="line">       if (! isChrome) &#123;  </div><div class="line">    //浏览器后退刷新</div><div class="line">            function reload() &#123;</div><div class="line">                setInterval(function() &#123;   //这个定时器返回A页面会继续执行</div><div class="line">                    if (localStorage.reload == &apos;true&apos; ) &#123;  //判断是否刷新页面</div><div class="line">                        localStorage.setItem(&apos;reload&apos;,&apos;false&apos;);</div><div class="line">                        location.reload()</div><div class="line">                    &#125;</div><div class="line">                &#125;, 500)</div><div class="line">            &#125;;</div><div class="line">        reload();</div><div class="line">       &#125;  </div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>在A页面之后访问的页面（如页面B）添加一下一行代码<br>ps：作为A页面执行刷新功能的开关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(&apos;reload&apos;,&apos;true&apos;);</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写页面时你可能会遇到这个问题，就是用Firefox，Safari，IE等非chrome浏览器，点击浏览器自带的返回键会发现不会刷新页面，因为那时js代码没有执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在网上搜到的有的不能用，有的兼容性很差，故自己想了解决方法，核心是利用setInterval的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样比如下面这种情形：&lt;br&gt;本来只建了一个二维码，新建了一个&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发总结" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="功能" scheme="http://yoursite.com/tags/%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>react版的抽奖程序&amp;滚动字幕(入门小demo)</title>
    <link href="http://yoursite.com/2017/07/18/react%E7%89%88%E7%9A%84%E6%8A%BD%E5%A5%96%E7%A8%8B%E5%BA%8F&amp;%E6%BB%9A%E5%8A%A8%E5%AD%97%E5%B9%95(%E5%85%A5%E9%97%A8%E5%B0%8Fdemo)/"/>
    <id>http://yoursite.com/2017/07/18/react版的抽奖程序&amp;滚动字幕(入门小demo)/</id>
    <published>2017-07-18T12:21:32.000Z</published>
    <updated>2017-09-16T08:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>因项目需求，需要写一个react的抽奖程序和字幕滚动。<br>本来之前用的是vue，没用过react，而项目组框架用的是react，萌新只能弃vue改学用react了</p>
<p>写完这个入门小demo，也算初识了下react。</p>
<blockquote>
<p>老习惯，写了详细的代码注释。</p>
</blockquote>
<p><a href="https://github.com/hxvin/draw" target="_blank" rel="external">demo地址</a></p>
<p>更新 ======================</p>
<a id="more"></a>
<p>a：增加了抽奖前的判断：</p>
<p>1.当天是否已抽过奖， ‘否’的话进入下一条判断<br>（这里用localstorage储存，获取当天24点时间戳，过了当天24点localstorage储存清除，时间都是获取本地时间，实际应用应采用服务器时间，防止用户修改本地时间来作弊）</p>
<p>2.现在抽奖时间是否在16-17点之间，‘是’的话则开始抽奖</p>
<p>b：增加了react版的字幕滚动</p>
<p><a href="http://ooytyiziz.bkt.clouddn.com/QQ20170715-193001-HD.gif" target="_blank" rel="external">最初版简陋抽奖gif图</a></p>
<p><a href="http://ooytyiziz.bkt.clouddn.com/draw.png" target="_blank" rel="external">抽奖&amp;字幕滚动图</a></p>
<h3 id="下载运行"><a href="#下载运行" class="headerlink" title="下载运行"></a>下载运行</h3><p>git  clone <a href="https://github.com/hxvin/draw.git" target="_blank" rel="external">https://github.com/hxvin/draw.git</a></p>
<p>cd draw</p>
<p>npm install</p>
<p>npm start</p>
<p>有错的或者不完善的地方恳请指出纠正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目需求，需要写一个react的抽奖程序和字幕滚动。&lt;br&gt;本来之前用的是vue，没用过react，而项目组框架用的是react，萌新只能弃vue改学用react了&lt;/p&gt;
&lt;p&gt;写完这个入门小demo，也算初识了下react。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;老习惯，写了详细的代码注释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hxvin/draw&quot;&gt;demo地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更新 ======================&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>公司团队开发git分支管理</title>
    <link href="http://yoursite.com/2017/07/08/%E5%85%AC%E5%8F%B8%E5%9B%A2%E9%98%9F%E5%BC%80%E5%8F%91git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2017/07/08/公司团队开发git分支管理/</id>
    <published>2017-07-08T02:48:02.000Z</published>
    <updated>2017-07-08T03:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 从台湾回来那天刚好HR姐姐通知我隔天去公司面试，经过一下午四个面试官的面试之后(讲道理我司面试效率很高👍)，开心地收到公司的实习offer，现在懵逼地上了一周的班。。。。。懵逼的原因是自己太菜了。公司的前端要求具备全栈能力，而我不懂后端吗，所以增哥让我这几天学下php，yaf(php框架)，koa(node js框架)。然后就是熟悉团队开发流程，前端，后端，测试，运维。。。git分支管理代码提交。。。。等，新奇的一周，好多技术可以学，好开心，哈哈哈~~(这里着重感谢增哥大神不厌其烦地指导我)</p>
 <a id="more"></a>
<h2 id="git分支管理策略学习"><a href="#git分支管理策略学习" class="headerlink" title="git分支管理策略学习"></a>git分支管理策略学习</h2><p>这里可以看看廖雪峰老师写的教程，写得挺好的。<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758410364457b9e3d821f4244beb0fd69c61a185ae0000" target="_blank" rel="external">廖雪峰git分支管理策略</a></p>
<h2 id="我们的git分支管理流程"><a href="#我们的git分支管理流程" class="headerlink" title="我们的git分支管理流程"></a>我们的git分支管理流程</h2><p>git分支管理对团队协作开发真的好用，我们是这样做的。</p>
<p>1.把项目clone到本地，然后建一个自己的子分支，自己就在子分支上写你的代码；</p>
<p>2.写完了提交(commit)</p>
<p>3.把dev分支合并(merge)到自己的分支上看有没有冲突，这样如果有冲突就直接在自己的分支上解决掉</p>
<p>4.check out到dev分支，把自己没问题的分支合并(merge)到dev分支上</p>
<p>5.push dev分支</p>
<p>6.你的上级check一下，觉得没问题就合并到origin</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt; 从台湾回来那天刚好HR姐姐通知我隔天去公司面试，经过一下午四个面试官的面试之后(讲道理我司面试效率很高👍)，开心地收到公司的实习offer，现在懵逼地上了一周的班。。。。。懵逼的原因是自己太菜了。公司的前端要求具备全栈能力，而我不懂后端吗，所以增哥让我这几天学下php，yaf(php框架)，koa(node js框架)。然后就是熟悉团队开发流程，前端，后端，测试，运维。。。git分支管理代码提交。。。。等，新奇的一周，好多技术可以学，好开心，哈哈哈~~(这里着重感谢增哥大神不厌其烦地指导我)&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具使用" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="实习日记" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>图片懒加载及节流函数优化性能</title>
    <link href="http://yoursite.com/2017/06/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8F%8A%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2017/06/24/图片懒加载及节流函数优化性能/</id>
    <published>2017-06-24T13:02:40.000Z</published>
    <updated>2017-06-25T04:14:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为啥要用图片懒加载"><a href="#为啥要用图片懒加载" class="headerlink" title="为啥要用图片懒加载"></a>为啥要用图片懒加载</h2><p>对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。当页面图片很多时，页面的加载速度缓慢，几S钟内页面没有加载完成，也许会失去很多的用户。<br>所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>将页面中的img标签src指向一张小图片或者src为空，然后定义data-src（这个属性可以自定义命名，我才用data-src）属性指向真实的图片。src指向一张默认的图片，否则当src为空时也会向服务器发送一次请求（指向默认的一张图那就只需请求一次）。可以指向loading的地址。</p>
<p>当载入页面时，先把可视区域内的img标签的data-src属性值负给src，然后监听滚动事件，把用户即将看到的图片加载。这样便实现了懒加载。</p>
<ul>
<li>ps：图片要指定宽高</li>
</ul>
<p>关于窗口各种宽度，给出网上找的一张好图</p>
<p><img src="http://ooytyiziz.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%84%E7%A7%8D%E5%AE%BD%E5%BA%A6.png" alt="各种宽度"></p>
<blockquote>
<p>如果仍不是很理解，看这两篇文章</p>
</blockquote>
<p><a href="http://www.cnblogs.com/kongxianghai/p/4192032.html" target="_blank" rel="external">scrollWidth,clientWidth,offsetWidth的区别</a></p>
<p><a href="http://www.cnblogs.com/fullhouse/archive/2012/01/16/2324131.html" target="_blank" rel="external">JS中关于clientWidth offsetWidth scrollWidth 等的含义</a></p>
<h2 id="图片懒加载的实现代码"><a href="#图片懒加载的实现代码" class="headerlink" title="图片懒加载的实现代码"></a>图片懒加载的实现代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        img &#123;</div><div class="line">            display: block;</div><div class="line">            margin-bottom: 50px;</div><div class="line">            width: 400px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">     &lt;img src=&quot;&quot; data-src=&quot;http://pic.58pic.com/58pic/17/18/97/01U58PIC4Xr_1024.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p01N203pHTU7/Wr5314kcLAtVCi.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://77fkxu.com1.z0.glb.clouddn.com/20160308/1457402219_73571.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://pic1.cxtuku.com/00/16/18/b3809a2ba0f3.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://img.bitscn.com/upimg/allimg/c150708/14363B06253120-6060O.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p015trgKM7vw/H0iyDPPneOVrA4.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://imgsrc.baidu.com/baike/pic/item/2f9cbdcc5e0bcf5c00e9283b.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    (function()&#123;</div><div class="line">    let num = document.getElementsByTagName(&apos;img&apos;).length;</div><div class="line">    let img = document.getElementsByTagName(&quot;img&quot;);</div><div class="line">    let n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历</div><div class="line">    lazyload(); //页面载入完毕加载可是区域内的图片</div><div class="line">     window.onscroll = lazyload;</div><div class="line">    function lazyload() &#123; //监听页面滚动事件</div><div class="line">        let seeHeight = document.documentElement.clientHeight; //可见区域高度</div><div class="line">        let scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //滚动条距离顶部高度</div><div class="line">        for (let i = n; i &lt; num; i++) &#123;</div><div class="line">            // 图片未出现时距离顶部的距离大于滚动条距顶部的距离+可视区的高度</div><div class="line">            if (img[i].offsetTop &lt; seeHeight + scrollTop) &#123;</div><div class="line">                if (img[i].getAttribute(&quot;src&quot;) == &quot;&quot;) &#123;</div><div class="line">                    img[i].src = img[i].getAttribute(&quot;data-src&quot;);</div><div class="line">                &#125;</div><div class="line">                n = i + 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;)()</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="使用节流函数进行优化"><a href="#使用节流函数进行优化" class="headerlink" title="使用节流函数进行优化"></a>使用节流函数进行优化</h2><p>如果直接将函数绑定在scroll事件上，当页面滚动时，函数会被高频触发，这非常影响浏览器的性能。</p>
<p>同时还有以下场景往往由于事件频繁被触发，因而频繁执行DOM操作、资源加载等重行为，导致UI停顿甚至浏览器崩溃。</p>
<p>1.window对象的resize、scroll事件</p>
<p>2.拖拽时的mousemove事件</p>
<p>3.射击游戏中的mousedown、keydown事件</p>
<p>4.文字输入、自动完成的keyup事件</p>
<p>解决这个问题的方法有去抖动和节流的方法</p>
<ul>
<li>去抖动原理： 当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。</li>
</ul>
<blockquote>
<p>不足:当我一直滚动鼠标的时候，lazyload函数就会不断被延迟，这样只有停下来的时候才会执行，那么再有些需要及时显示的情况下，就显得不那么友好了</p>
</blockquote>
<ul>
<li>节流原理：预设一个执行周期，如果这个周期结束了都还没触发函数，那就会执行一次函数；如果这个周期还没结束就触发了函数，那定时器将重置，开始新周期。</li>
</ul>
<blockquote>
<p>达到了想要的效果，既没有频繁的执行也没有延迟执行</p>
</blockquote>
<p>详细可看此文<br><a href="http://www.jianshu.com/p/4f3e2c8f5e95" target="_blank" rel="external">关于js函数节流和去抖动</a></p>
<h2 id="运用节流函数的图片懒加载代码"><a href="#运用节流函数的图片懒加载代码" class="headerlink" title="运用节流函数的图片懒加载代码"></a>运用节流函数的图片懒加载代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        img &#123;</div><div class="line">            display: block;</div><div class="line">            margin-bottom: 50px;</div><div class="line">            width: 400px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">     &lt;img src=&quot;&quot; data-src=&quot;http://pic.58pic.com/58pic/17/18/97/01U58PIC4Xr_1024.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p01N203pHTU7/Wr5314kcLAtVCi.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://77fkxu.com1.z0.glb.clouddn.com/20160308/1457402219_73571.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://pic1.cxtuku.com/00/16/18/b3809a2ba0f3.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://img.bitscn.com/upimg/allimg/c150708/14363B06253120-6060O.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://cover.read.duokan.com/mfsv2/download/fdsc3/p015trgKM7vw/H0iyDPPneOVrA4.jpg!t&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://imgsrc.baidu.com/baike/pic/item/2f9cbdcc5e0bcf5c00e9283b.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">    &lt;img src=&quot;&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    (function()&#123;</div><div class="line">    let num = document.getElementsByTagName(&apos;img&apos;).length;</div><div class="line">    let img = document.getElementsByTagName(&quot;img&quot;);</div><div class="line">    let n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历</div><div class="line">    lazyload(); //页面载入完毕加载可是区域内的图片</div><div class="line">    function lazyload() &#123; //监听页面滚动事件</div><div class="line">        let seeHeight = document.documentElement.clientHeight; //可见区域高度</div><div class="line">        let scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //滚动条距离顶部高度</div><div class="line">        for (let i = n; i &lt; num; i++) &#123;</div><div class="line">            // 图片未出现时距离顶部的距离大于滚动条距顶部的距离+可视区的高度</div><div class="line">            if (img[i].offsetTop &lt; seeHeight + scrollTop) &#123;</div><div class="line">                if (img[i].getAttribute(&quot;src&quot;) == &quot;&quot;) &#123;</div><div class="line">                    img[i].src = img[i].getAttribute(&quot;data-src&quot;);</div><div class="line">                &#125;</div><div class="line">                n = i + 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    采用了节流函数</div><div class="line">        function throttle(fun, delay, time) &#123;</div><div class="line">    let timeout,</div><div class="line">        startTime = new Date();</div><div class="line">    return function() &#123;</div><div class="line">        let context = this,</div><div class="line">            args = arguments,</div><div class="line">            curTime = new Date();</div><div class="line">        clearTimeout(timeout);</div><div class="line">        // 如果达到了规定的触发时间间隔，触发 handler</div><div class="line">        if (curTime - startTime &gt;= time) &#123;</div><div class="line">            fun.apply(context, args);</div><div class="line">            startTime = curTime;</div><div class="line">            // 没达到触发间隔，重新设定定时器</div><div class="line">        &#125; else &#123;</div><div class="line">            timeout = setTimeout(fun, delay);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line">window.addEventListener(&apos;scroll&apos;,throttle(lazyload,500,1000));</div><div class="line">    &#125;)()</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为啥要用图片懒加载&quot;&gt;&lt;a href=&quot;#为啥要用图片懒加载&quot; class=&quot;headerlink&quot; title=&quot;为啥要用图片懒加载&quot;&gt;&lt;/a&gt;为啥要用图片懒加载&lt;/h2&gt;&lt;p&gt;对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。当页面图片很多时，页面的加载速度缓慢，几S钟内页面没有加载完成，也许会失去很多的用户。&lt;br&gt;所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>图文解析HTMLElement.offsetHeight,scrollHeight,clientHeight</title>
    <link href="http://yoursite.com/2017/06/05/HTMLElement-offsetHeight-scrollHeight-clientHeight/"/>
    <id>http://yoursite.com/2017/06/05/HTMLElement-offsetHeight-scrollHeight-clientHeight/</id>
    <published>2017-06-05T14:32:29.000Z</published>
    <updated>2017-06-20T07:17:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTMLElement-offsetHeight"><a href="#HTMLElement-offsetHeight" class="headerlink" title="HTMLElement.offsetHeight"></a>HTMLElement.offsetHeight</h3><p>是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p>
<p>通常，元素的offsetHeight是一种衡量标准，包括元素的边框、垂直内边距和元素的水平滚动条（如果存在且渲染的话）和元素的CSS高度。</p>
<p>对于文档的主体对象，它包括代替元素的CSS高度线性总含量高。浮动元素的向下延伸内容高度是被忽略的。 </p>
<p><img src="https://developer.mozilla.org/@api/deki/files/788/=OffsetHeight.png" alt="实例"></p>
<a id="more"></a>
<h3 id="Element-scrollHeight"><a href="#Element-scrollHeight" class="headerlink" title="Element.scrollHeight"></a>Element.scrollHeight</h3><p>Element.scrollHeight 是计量元素内容高度的只读属性，包括overflow样式属性导致的视图中不可见内容。没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同。包括元素的padding，但不包括元素的margin.</p>
<p><img src="https://developer.mozilla.org/@api/deki/files/840/=ScrollHeight.png" alt="实例"></p>
<h3 id="Element-clientHeight"><a href="#Element-clientHeight" class="headerlink" title="Element.clientHeight"></a>Element.clientHeight</h3><p>返回元素内部的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距。</p>
<p>clientHeight 可以通过 CSS height + CSS padding - 水平滚动条高度 (如果存在)来计算.</p>
<p>也就是说，是没有垂直滚动条版本的scrollHeight。</p>
<hr>
<p>更新：</p>
<p>clientWidth = width + padding</p>
<p>clientHeight = height + padding</p>
<p>offsetWidth = width + padding + border</p>
<p>offsetHeight = height + padding + border</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTMLElement-offsetHeight&quot;&gt;&lt;a href=&quot;#HTMLElement-offsetHeight&quot; class=&quot;headerlink&quot; title=&quot;HTMLElement.offsetHeight&quot;&gt;&lt;/a&gt;HTMLElement.offsetHeight&lt;/h3&gt;&lt;p&gt;是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。&lt;/p&gt;
&lt;p&gt;通常，元素的offsetHeight是一种衡量标准，包括元素的边框、垂直内边距和元素的水平滚动条（如果存在且渲染的话）和元素的CSS高度。&lt;/p&gt;
&lt;p&gt;对于文档的主体对象，它包括代替元素的CSS高度线性总含量高。浮动元素的向下延伸内容高度是被忽略的。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.mozilla.org/@api/deki/files/788/=OffsetHeight.png&quot; alt=&quot;实例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>mac使用tree</title>
    <link href="http://yoursite.com/2017/05/30/mac%E4%BD%BF%E7%94%A8tree/"/>
    <id>http://yoursite.com/2017/05/30/mac使用tree/</id>
    <published>2017-05-30T05:53:43.000Z</published>
    <updated>2017-05-30T08:49:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、brew安装"><a href="#一、brew安装" class="headerlink" title="一、brew安装"></a>一、brew安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>然后一直按return键即可</p>
<h2 id="二、brew使用"><a href="#二、brew使用" class="headerlink" title="二、brew使用"></a>二、brew使用</h2><h3 id="brew安装套件："><a href="#brew安装套件：" class="headerlink" title="brew安装套件："></a>brew安装套件：</h3><blockquote>
<p>$ brew install tree</p>
</blockquote>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>$ tree -a          //显示所有文件和目录。</p>
<p>$ tree -d         //显示目录名称而非内容</p>
<p>$ tree -L 2      //这个命令是比较实用的，后面的数字2代表几层</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、brew安装&quot;&gt;&lt;a href=&quot;#一、brew安装&quot; class=&quot;headerlink&quot; title=&quot;一、brew安装&quot;&gt;&lt;/a&gt;一、brew安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
      <category term="工具使用" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue2写单页面项目总结记录</title>
    <link href="http://yoursite.com/2017/05/29/post%E7%94%A8vue%E5%86%99webapp%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%971/"/>
    <id>http://yoursite.com/2017/05/29/post用vue写webapp项目总结系列1/</id>
    <published>2017-05-29T01:40:25.000Z</published>
    <updated>2017-09-16T08:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直想做个有数据内容的项目，刚好vue社区提供了API，在此感谢。<br>这是一个基于<code>vue+vue-cli+vue-router+axios+webpack</code>开发的vue社区<code>SPA</code>;UI用<code>Muse-UI</code>;css用<code>scss</code>，<code>flex</code>布局，<code>rem</code>做移动端适配，最终效果电脑端移动端都适配。<br><a id="more"></a></p>
<p>如果你和我一样用vue还挺生疏的，那好好做完这个项目，会学到很多东西，能有挺大的进步，还可以自己加功能，一起(๑•̀ㅂ•́)و✧加油。</p>
<p>如果对您有帮助，请给一个<code>star</code>鼓励一下萌新，感谢 ^ ^<br>如果您也是前端萌新，来互相follow互相学习，一起进步呀。</p>
<blockquote>
<p>建议先去社区<a href="https://www.vue-js.com/signup" target="_blank" rel="external">注册</a>拿accesstoken登录体验(注册可以直接用github账号，挺快的)</p>
</blockquote>
<p><a href="http://www.hxvin.me/vue-home/dist/" target="_blank" rel="external">demo</a></p>
<p><a href="http://ooytyiziz.bkt.clouddn.com/vue-home.gif" target="_blank" rel="external">点击查看gif动图展示</a></p>
<p><a href="https://github.com/Hxvin/vue-home" target="_blank" rel="external">github项目地址</a> </p>
<p><a href="https://www.vue-js.com/api/" target="_blank" rel="external">项目API</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-ea6d4e5ec360acb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机扫描查看效果"></p>
<blockquote>
<p>完成功能</p>
</blockquote>
<ul>
<li>[x] 首页列表</li>
<li>[x] 下拉加载</li>
<li>[x] 用户信息（点击头像）</li>
<li>[x] 主题内容</li>
<li>[x] 登录功能</li>
<li>[x] 收藏（取消收藏）主题</li>
<li>[x] 评论列表</li>
<li>[x] 点赞（取消点赞）功能</li>
<li>[x] 消息中心（已读、未读）</li>
<li>[x] 个人中心</li>
<li>[x] 发表评论</li>
<li>[x] 回复评论</li>
<li>[x] 发布主题（支持markdown格式,可预览）</li>
</ul>
<blockquote>
<p>todo功能</p>
<ul>
<li>[ ] 左右侧滑</li>
<li>[ ] 搜索功能</li>
<li>[ ] vuex重构</li>
</ul>
</blockquote>
<h3 id="准备开发环境"><a href="#准备开发环境" class="headerlink" title="准备开发环境"></a>准备开发环境</h3><ul>
<li>$ npm install -g vue-cli </li>
<li>$ vue init webpack vue-home</li>
</ul>
<p><code>? Project name vue-home
? Project description vue-home
? Author afei
? Vue build standalone
? Install vue-router? Yes
? Use ESLint to lint your code? No
? Setup unit tests with Karma + Mocha? No
? Setup e2e tests with Nightwatch? No</code></p>
<ul>
<li>$ cd vue-home</li>
<li>$ npm install</li>
<li>$ npm run dev<br>等写完项目后</li>
<li>$ npm run build</li>
<li><blockquote>
<p>注意：npm run dev 之后 默认浏览器打开的是<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>  请换成<a href="http://localhost:8080/vue-home/dist" target="_blank" rel="external">http://localhost:8080/vue-home/dist</a><br>如果你电脑的8080端口被占用，请congfig/index.js中找到<code>port: 8080</code>修改成8081或者其他可用的端口</p>
</blockquote>
</li>
</ul>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">├── build</div><div class="line">│   ├── build.js</div><div class="line">│   ├── check-versions.js</div><div class="line">│   ├── dev-client.js</div><div class="line">│   ├── dev-server.js</div><div class="line">│   ├── utils.js</div><div class="line">│   ├── vue-loader.conf.js</div><div class="line">│   ├── webpack.base.conf.js</div><div class="line">│   ├── webpack.dev.conf.js</div><div class="line">│   └── webpack.prod.conf.js</div><div class="line">├── config</div><div class="line">│   ├── dev.env.js</div><div class="line">│   ├── index.js</div><div class="line">│   └── prod.env.js</div><div class="line">├── dist                  //等写完项目后 $ npm run build 的打包文件</div><div class="line">│   ├── index.html</div><div class="line">│   └── static</div><div class="line">├── index.html            //首页入口文件</div><div class="line">├── node_modules</div><div class="line">├── package.json          </div><div class="line">├── src</div><div class="line">│   ├── App.vue           //项目入口文件</div><div class="line">│   ├── assets</div><div class="line">│   │   ├── 1495982696.png  //手机扫描二维码</div><div class="line">│   │   ├── logo.png        //vue logo</div><div class="line">│   │   └── sass            //sass通用样式</div><div class="line">│   ├── components          //组件</div><div class="line">│   │   ├── FooterNav.vue   //底部nav组件</div><div class="line">│   │   ├── HeaderBar.vue   //顶部横条</div><div class="line">│   │   ├── HeaderTabs.vue  //顶部tabs组件&amp;主页面内容拉取</div><div class="line">│   │   └── Hello.vue        </div><div class="line">│   ├── main.js             //核心文件 在这里引入了Muse UI 时间过滤器</div><div class="line">│   ├── pages               //页面</div><div class="line">│   │   ├── content.vue     //帖子内容页面  </div><div class="line">│   │   ├── index.vue       //首页</div><div class="line">│   │   ├── login.vue       //登录页面</div><div class="line">│   │   ├── message.vue     //信息通知页面</div><div class="line">│   │   ├── more.vue        </div><div class="line">│   │   ├── my.vue          //个人信息页面</div><div class="line">│   │   ├── people.vue      //社区用户信息页面</div><div class="line">│   │   └── publish.vue     //发布帖子页面(此页面还没写完)</div><div class="line">│   ├── router              //路由与组件配置</div><div class="line">│   │   └── index.js </div><div class="line">│   └── util                //时间过滤器，转换时间格式</div><div class="line">│       └── filter.js</div><div class="line">└── static</div></pre></td></tr></table></figure>
<h4 id="vue-home-config-index-js"><a href="#vue-home-config-index-js" class="headerlink" title="vue-home/config/index.js"></a>vue-home/config/index.js</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-30138bb5cd33b265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-home/config/index.js图"></p>
<p><code>assetsPublicPath: &#39;/vue-home/dist&#39;</code></p>
<blockquote>
<p>这个公共路径原本为assetsPublicPath: ‘/‘，这样在本地服务器是可以跑，可是打包上传到github后会发现打开的页面是空白的，报错如下图。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-82edc72f02251f48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网页加载报错图"></p>
<p>原因是路径错了，vue-home是项目文件夹名称，dist是npm run build之后出现的文件夹，github上线就是读取dist文件夹而生成的网页（成功展示的demo地址长这样：<a href="http://www.hxvin.me/vue-home/dist/）" target="_blank" rel="external">http://www.hxvin.me/vue-home/dist/）</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5287253-86ca75ba374431a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github图"></p>
<p>解决上线路径问题不知道还有没有其他更方便的解决方法，如果有，请跟我讲下哦</p>
<blockquote>
<p>port: 8080 这个是让你改端口的</p>
</blockquote>
<h4 id="vue-home-src-App-vue"><a href="#vue-home-src-App-vue" class="headerlink" title="vue-home/src/App.vue"></a>vue-home/src/App.vue</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-711de34d2a7e98b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-home/src/App.vue图"></p>
<p>rem适配移动端，1rem=10px</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">html&#123;</div><div class="line">  font-size: 62.5%;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建议注释掉这段，不然会然干扰后面的css</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/*text-align: center;*/</div><div class="line">/*color: #2c3e50;</div><div class="line">margin-top: 60px;*/</div></pre></td></tr></table></figure>
<h4 id="vue-home-index-html"><a href="#vue-home-index-html" class="headerlink" title="/vue-home/index.html"></a>/vue-home/index.html</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-6c3ef9e8a11a259b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="/vue-home/index.html图"></p>
<p>我们是做的移动端，适配web端，所以在index.html里面加上meta</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=0&quot;&gt;</div></pre></td></tr></table></figure>
<p>用MuseUI的添加之一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="vue-home-src-main-js"><a href="#vue-home-src-main-js" class="headerlink" title="vue-home/src/main.js"></a>vue-home/src/main.js</h4><p><img src="http://upload-images.jianshu.io/upload_images/5287253-6dbc7c159543aefc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-home/src/main.js图"></p>
<p>图中有标识了哪些是用来干嘛的，分别是用MuseUI的添加之一；filters是用来把社区api数据中的时间格式转换成<code>*分钟前``*小时前``*天前</code></p>
<h4 id="关于新建主题功能"><a href="#关于新建主题功能" class="headerlink" title="关于新建主题功能"></a>关于新建主题功能</h4><p>api上写了需post</p>
<p>title String 标题</p>
<p>tab String 目前有 ask share job</p>
<p>content String 主体内容</p>
<ul>
<li>记得还需要传递accesstoken的参数，不然会报403错误（资源不可用）</li>
</ul>
<p>markdown格式支持 直接 npm install marked –save  用法详见代码</p>
<p>（代码好像用文章不方便介绍，我很详细地写了代码注释哦^_^）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一直想做个有数据内容的项目，刚好vue社区提供了API，在此感谢。&lt;br&gt;这是一个基于&lt;code&gt;vue+vue-cli+vue-router+axios+webpack&lt;/code&gt;开发的vue社区&lt;code&gt;SPA&lt;/code&gt;;UI用&lt;code&gt;Muse-UI&lt;/code&gt;;css用&lt;code&gt;scss&lt;/code&gt;，&lt;code&gt;flex&lt;/code&gt;布局，&lt;code&gt;rem&lt;/code&gt;做移动端适配，最终效果电脑端移动端都适配。&lt;br&gt;
    
    </summary>
    
    
      <category term="vue2" scheme="http://yoursite.com/tags/vue2/"/>
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JS函数方法坑与填坑</title>
    <link href="http://yoursite.com/2017/05/17/JS%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%9D%91%E4%B8%8E%E5%A1%AB%E5%9D%91/"/>
    <id>http://yoursite.com/2017/05/17/JS函数方法坑与填坑/</id>
    <published>2017-05-17T05:37:50.000Z</published>
    <updated>2017-05-17T05:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先，先认识下什么叫函数的方法："><a href="#首先，先认识下什么叫函数的方法：" class="headerlink" title="首先，先认识下什么叫函数的方法："></a>首先，先认识下什么叫函数的方法：</h2><p>在一个对象中绑定函数，称为这个对象的方法。</p>
<h3 id="再给具体的例子："><a href="#再给具体的例子：" class="headerlink" title="再给具体的例子："></a>再给具体的例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    age: function () &#123;</div><div class="line">        var y = new Date().getFullYear();</div><div class="line">        return y - this.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.age; // function xiaoming.age()</div><div class="line">xiaoming.age(); // 27</div></pre></td></tr></table></figure>
<p>xiaoming是一个对象，age（）函数就是该对象的方法。<br>此时this指向xiaoming</p>
<a id="more"></a>
<h3 id="如果拆开写："><a href="#如果拆开写：" class="headerlink" title="如果拆开写："></a>如果拆开写：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function getAge() &#123;</div><div class="line">    var y = new Date().getFullYear();</div><div class="line">    return y - this.birth;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    age: getAge</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.age(); // 27, 正常结果</div><div class="line">getAge(); // NaN</div><div class="line">var fn = xiaoming.age; // 先拿到xiaoming的age函数</div><div class="line">fn(); // NaN</div></pre></td></tr></table></figure>
<p>以对象的方法形式调用没问题，该函数的this指向被调用的对象xiaomign； 你会发现单独调用getAge()函数返回NaN,该函数的this指向全局对象，也就是window，这是JS的一个<code>坑</code>。</p>
<h3 id="填坑："><a href="#填坑：" class="headerlink" title="填坑："></a>填坑：</h3><h4 id="1-要保证this指向正确，必须用obj-xxx-的形式调用！"><a href="#1-要保证this指向正确，必须用obj-xxx-的形式调用！" class="headerlink" title="1. 要保证this指向正确，必须用obj.xxx()的形式调用！"></a>1. 要保证this指向正确，必须用obj.xxx()的形式调用！</h4><p>这里需<code>注意</code>：obj.xxx()也不是什么情况下都适用的，比如在在函数内定义的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    age: function () &#123;</div><div class="line">        function getAgeFromBirth() &#123;</div><div class="line">            var y = new Date().getFullYear();</div><div class="line">            return y - this.birth;</div><div class="line">        &#125;</div><div class="line">        return getAgeFromBirth();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.age(); // Uncaught TypeError: Cannot read property &apos;birth&apos; of undefined</div><div class="line">填坑：</div><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    age: function () &#123;</div><div class="line">        var that = this; // 在方法内部一开始就捕获this</div><div class="line">        function getAgeFromBirth() &#123;</div><div class="line">            var y = new Date().getFullYear();</div><div class="line">            return y - that.birth; // 用that而不是this</div><div class="line">        &#125;</div><div class="line">        return getAgeFromBirth();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.age(); // 27</div></pre></td></tr></table></figure>
<h4 id="2-或者用apply-和call-方法修复函数调用："><a href="#2-或者用apply-和call-方法修复函数调用：" class="headerlink" title="2.或者用apply()和call()方法修复函数调用："></a>2.或者用apply()和call()方法修复函数调用：</h4><p>函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function getAge() &#123;</div><div class="line">    var y = new Date().getFullYear();</div><div class="line">    return y - this.birth;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    age: getAge</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.age(); // 25</div><div class="line">getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空</div></pre></td></tr></table></figure>
<p>apply()类似的方法是call()，唯一区别是：</p>
<p>apply()把参数打包成Array再传入；</p>
<p>call()把参数按顺序传入。<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max.apply(null, [3, 5, 4]); // 5</div><div class="line">Math.max.call(null, 3, 5, 4); // 5</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先，先认识下什么叫函数的方法：&quot;&gt;&lt;a href=&quot;#首先，先认识下什么叫函数的方法：&quot; class=&quot;headerlink&quot; title=&quot;首先，先认识下什么叫函数的方法：&quot;&gt;&lt;/a&gt;首先，先认识下什么叫函数的方法：&lt;/h2&gt;&lt;p&gt;在一个对象中绑定函数，称为这个对象的方法。&lt;/p&gt;
&lt;h3 id=&quot;再给具体的例子：&quot;&gt;&lt;a href=&quot;#再给具体的例子：&quot; class=&quot;headerlink&quot; title=&quot;再给具体的例子：&quot;&gt;&lt;/a&gt;再给具体的例子：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var xiaoming = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name: &amp;apos;小明&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    birth: 1990,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age: function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var y = new Date().getFullYear();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return y - this.birth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xiaoming.age; // function xiaoming.age()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xiaoming.age(); // 27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;xiaoming是一个对象，age（）函数就是该对象的方法。&lt;br&gt;此时this指向xiaoming&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vue2的todolist入门小项目的详细解析</title>
    <link href="http://yoursite.com/2017/05/09/vue2%E7%9A%84todolist%E5%85%A5%E9%97%A8%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/09/vue2的todolist入门小项目的详细解析/</id>
    <published>2017-05-09T05:08:49.000Z</published>
    <updated>2017-05-10T03:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>看完vue2的官方文档后，找个入门项目巩固下知识点，简单的todolsit是个不错的选择。<br>项目用到了<code>vue.js</code> <code>vue.cli</code> <code>webpack</code> <code>ES6</code> <code>node环境</code>，完成项目后会对这些技术栈有了些了解。</p>
<a id="more"></a>
<h3 id="准备开发环境"><a href="#准备开发环境" class="headerlink" title="准备开发环境"></a>准备开发环境</h3><ul>
<li>$ npm install -g vue-cli </li>
<li>$ vue init <template-name> <project-name> ，比如 vue init webpack todolist</project-name></template-name></li>
<li>$ cd todolist</li>
<li>$ npm install</li>
<li>$ npm run dev</li>
<li>安装谷歌插件vue.js devtools</li>
<li>下载vue.js的<a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">webpack模板</a></li>
<li>下载 <a href="https://github.com/tastejs/todomvc-app-template" target="_blank" rel="external">todomvc的模板</a> (提供html和css)（也可以直接$ git clone <a href="https://github.com/tastejs/todomvc-app-template.git" target="_blank" rel="external">https://github.com/tastejs/todomvc-app-template.git</a> 来下载）</li>
<li>把todomvc的index.html拖到todolist文件夹去覆盖里面的index.html</li>
<li>打开todomvc的json文件，会看到 “todomvc-app-css”: “^2.0.0”,就是要你 npm  install todomvc-app-css -S 从而下载该css</li>
<li>删点todolsit index.html的默认css，js引用，src文件夹下的main.js引入模板css（import‘todomvc-app-css/index.css’）</li>
<li>引入vue（import Vue form ‘vue’）</li>
<li>等写完代码后 $npm run build 一键打包构建，会看到dist文件夹</li>
</ul>
<h3 id="main-js的代码"><a href="#main-js的代码" class="headerlink" title="main.js的代码"></a>main.js的代码</h3><blockquote>
<p>//后面的为注释讲解， ~表示串联index.html的对应内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">import &apos;todomvc-app-css/index.css&apos;</div><div class="line"></div><div class="line">import Vue from &apos;vue&apos;</div><div class="line"></div><div class="line">//添加localStorage</div><div class="line">var STORAGE_KEY = &apos;todos-vuejs-2.0&apos;</div><div class="line">var todoStorage = &#123;</div><div class="line">  fetch: function () &#123;</div><div class="line">    var todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || &apos;[]&apos;)</div><div class="line">    todos.forEach(function (todo, index) &#123;</div><div class="line">      todo.id = index</div><div class="line">    &#125;)</div><div class="line">    todoStorage.uid = todos.length</div><div class="line">    return todos</div><div class="line">  &#125;,</div><div class="line">  save: function (todos) &#123;</div><div class="line">    localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//用过滤器筛选出三种状态</div><div class="line">var filters = &#123;</div><div class="line">  all(todos) &#123;</div><div class="line">    return todos</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  active(todos) &#123;</div><div class="line">    return todos.filter((todo) =&gt; &#123;</div><div class="line">      return !todo.completed</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  completed(todos) &#123;</div><div class="line">    return todos.filter((todo) =&gt; &#123;</div><div class="line">      return todo.completed</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">let app = new Vue(&#123;</div><div class="line">  el: &apos;.todoapp&apos;,    // ~ &lt;section class=&quot;todoapp&quot;&gt;</div><div class="line">  data: &#123;</div><div class="line">    msg: &apos;hello world&apos;,</div><div class="line">    title: &apos;待做清单&apos;,   // 渲染标题 ~ &#123;&#123;title&#125;&#125;</div><div class="line">    newTodo: &apos;&apos;,</div><div class="line">     todos: todoStorage.fetch(),  // ~ v-show=&quot;todos.length&quot; ； ~ &#123;&#123;todos.length&gt;1?&apos;items&apos;:&apos;item&apos;&#125;&#125; 渲染 li ~  v-for=&quot;(todo,index) in filteredTodos&quot; </div><div class="line">    editedTodo: &apos;&apos;,   // 空的编辑对象</div><div class="line">    hashName: &apos;all&apos;    </div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  watch: &#123;</div><div class="line">    todos: &#123;</div><div class="line">      handler: function (todos) &#123;</div><div class="line">        todoStorage.save(todos)</div><div class="line">      &#125;,</div><div class="line">      deep: true</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  computed: &#123;</div><div class="line">    remain() &#123;</div><div class="line">      return filters.active(this.todos).length   //未完成事项的数量 ~ &#123;&#123;remain&#125;&#125;</div><div class="line">    &#125;, </div><div class="line">    isAll: &#123;     // ~ v-model=&quot;isAll&quot;</div><div class="line">      get() &#123;</div><div class="line">        return this.remain === 0</div><div class="line">      &#125;,</div><div class="line">      set(value) &#123;</div><div class="line">        this.todos.forEach((todo) =&gt; &#123;</div><div class="line">          todo.completed = value</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    filteredTodos() &#123;    //用hashName过滤出当前页面的todos  ~ v-for=&quot;(todo,index) in filteredTodos&quot; </div><div class="line">      return filters[this.hashName](this.todos)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  methods: &#123;</div><div class="line">    addTodo(e) &#123;  //输入值为空时，不添加（trim去除前后空格） ~ v-model.trim=&quot;newTodo&quot; </div><div class="line">      if (!this.newTodo) &#123;</div><div class="line">        return</div><div class="line">      &#125;</div><div class="line">      this.todos.push(&#123;</div><div class="line">        id: todoStorage.uid++,</div><div class="line">        content: this.newTodo,</div><div class="line">        completed: false //结合v-model 根据completed状态绑定样式  ~:class=&quot;&#123;completed:todo.completed； ~ v-model=&quot;todo.completed&quot;</div><div class="line">      &#125;)</div><div class="line">      this.newTodo = &apos;&apos;</div><div class="line">    &#125;,</div><div class="line">    removeTodo(index) &#123;   //绑定x样式，点击删除该todo ~ @click=&quot;removeTodo(index)&quot;</div><div class="line">      this.todos.splice(index, 1)</div><div class="line">    &#125;,</div><div class="line">    editTodo(todo) &#123;         //编辑 ~ @dblclick=&quot;editTodo(todo)&quot;</div><div class="line">      this.editCache = todo.content //储存编辑前的内容</div><div class="line">      this.editedTodo = todo  // 点击编辑里面的内容而不是只是空文本框~ editing:todo==editedTodo&#125;&quot;</div><div class="line">    &#125;,</div><div class="line">    doneEdit(todo, index) &#123;  //失去焦点后 ~ @blur=&quot;doneEdit(todo)&quot;；@keyup.enter=&quot;doneEdit(todo)&quot;</div><div class="line">      this.editedTodo = null  //不存在编辑了或者说编辑已完成</div><div class="line">      if (!todo.content) &#123;  //如果编辑后没有内容了，删除该todo</div><div class="line">        this.removeTodo(index)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    cancelEdit(todo) &#123;    //按esc键取消此次编辑操作 ~ @keyup.esc=&quot;cancelEdit(todo)&quot;&gt;</div><div class="line">      this.editedTodo = null     </div><div class="line">      todo.content = this.editCache //当esc取消编辑时，还原编辑前的内容</div><div class="line">    &#125;,</div><div class="line">    clear() &#123;  //点击清除已完成的功能 ~ @click=&quot;clear&quot;</div><div class="line">      this.todos = filters.active(this.todos)  //获取并渲染未完成的事项 ~ </div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  directives: &#123;   //自定义属性 ~ v-focus=&quot;todo == editedTodo&quot;</div><div class="line">    focus(el, value) &#123;  //文本框双击获取焦点</div><div class="line">      if (value) &#123;</div><div class="line">        el.focus()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//hash（url地址中#以及之后的字符）</div><div class="line">function hashChange() &#123; </div><div class="line">// ~ :class=&quot;&#123;selected:hashName==&apos;all&apos;&#125;&quot;；:class=&quot;&#123;selected:hashName==&apos;active&apos;&#125;&quot;；:class=&quot;&#123;selected:hashName==&apos;completed&apos;&#125;&quot;</div><div class="line">  let hashName = location.hash.replace(/#\/?/, &apos;&apos;)  //正则表达式去除#/？，获取如all，active，completed</div><div class="line">  if (filters[hashName]) &#123;   //如果过滤状态的hashName存在</div><div class="line">    app.hashName = hashName  //给整个app变量里的hashName赋上那个值</div><div class="line">  &#125; else &#123;</div><div class="line">    location.hash = &apos;&apos;    //取消</div><div class="line">    app.hashName = &apos;all&apos;  //否则就赋值‘all’，回到全部事项的页面</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">window.addEventListener(&apos;hashchange&apos;, hashChange) //全局监听hash</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看完vue2的官方文档后，找个入门项目巩固下知识点，简单的todolsit是个不错的选择。&lt;br&gt;项目用到了&lt;code&gt;vue.js&lt;/code&gt; &lt;code&gt;vue.cli&lt;/code&gt; &lt;code&gt;webpack&lt;/code&gt; &lt;code&gt;ES6&lt;/code&gt; &lt;code&gt;node环境&lt;/code&gt;，完成项目后会对这些技术栈有了些了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue2" scheme="http://yoursite.com/tags/vue2/"/>
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习</title>
    <link href="http://yoursite.com/2017/05/08/Vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/05/08/Vue学习/</id>
    <published>2017-05-08T02:21:32.000Z</published>
    <updated>2017-05-11T02:26:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文章用来不断记录Vue学习过程中一知半解知识点的总结，fighting~</p>
<blockquote>
<p>组件：可以扩展 HTML 元素，封装可重用的代码</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/55892803" target="_blank" rel="external">理解父组件，子组件</a></p>
<a id="more"></a>
<blockquote>
<p>v-model：使用 v-model 来进行数据双向绑定，根据控件类型自动选取正确的方法来更新元素，负责监听用户的输入事件以更新数据</p>
</blockquote>
<p>  <a href="http://blog.csdn.net/hellochenlu/article/details/52821827" target="_blank" rel="external">理解数据单向绑定，双向绑定</a></p>
<blockquote>
<p>钩子：</p>
</blockquote>
<p><a href="https://segmentfault.com/q/1010000004335505" target="_blank" rel="external">hook形象解释</a></p>
<blockquote>
<p>生命周期：</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/52917848/answer/150661534" target="_blank" rel="external">生命周期形象解释</a><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期官网图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章用来不断记录Vue学习过程中一知半解知识点的总结，fighting~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;组件：可以扩展 HTML 元素，封装可重用的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/55892803&quot;&gt;理解父组件，子组件&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>从实际项目小谈react生命周期</title>
    <link href="http://yoursite.com/2017/05/08/%E4%BB%8E%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E5%B0%8F%E8%B0%88react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/05/08/从实际项目小谈react生命周期/</id>
    <published>2017-05-08T02:21:32.000Z</published>
    <updated>2017-09-16T08:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p> 今天写的一个react版的滚动字幕，思路是用js操作展示内容的scrollWidth,然后用setInterval 循环调用function ，function内容大体思路是对文字内容userDOM.style.transform = ‘translateX(-‘+ i +’px)’,每次横向左移动ipx的距离，形成滚动效果，当i&gt;=scrollWidth的时候，将i归零，形成循环滚动。(这里操作了dom，不是很好)</p>
<p>这里先解释一下浏览器scrollWidth，scrollWidth，offsetWidth三种宽度的区别<br>情况1：<br>元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。<br>scrollWidth=scrollWidth，两者皆为内容可视区的宽度。<br>offsetWidth为元素的实际宽度。<br>情况2：<br>元素的内容超过可视区，滚动条出现和可用的情况下。<br>scrollWidth&gt;clientWidth。<br>scrollWidth为实际内容的宽度。<br>clientWidth是内容可视区的宽度。<br>offsetWidth是元素的实际宽度。</p>
<a id="more"></a>
<h4 id="出问题了"><a href="#出问题了" class="headerlink" title="出问题了"></a>出问题了</h4><p>为了以便调用后端接口前先模拟展示，将静态生成的内容写死的文字内容换成动态加载，还采取了随机生成用户ip和获奖内容，结果获取到的scrollWidth（元素内容的实际宽度，包括被隐藏的部分）只是内容可视区的宽度，显然是不行的，所以无法滚动全部，我们需要的是元素内容的实际宽度。为什么会出现这种情况呢？如果文字内容是静态生成的，内容写死的，并不会出现这种问题。</p>
<h4 id="问题出在哪里？"><a href="#问题出在哪里？" class="headerlink" title="问题出在哪里？"></a>问题出在哪里？</h4><p>出在动态加载还要考虑到react的生命周期，componentWillMount(将要挂载)-&gt;render(dom渲染)-&gt;componentDidMount(已经挂载)，这个滚动函数写在了componentDidMount中，也就是页面dom结构渲染完了文字内容才开始动态生成，结果scrollWidth抓取到的文字内容是空的，只能获取了内容可视区的宽度。<br><img src="http://upload-images.jianshu.io/upload_images/5287253-1e0d1ec12f576c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网上找的一张react生命周期的好图"></p>
<h4 id="问题找出来了，该如何解决呢？"><a href="#问题找出来了，该如何解决呢？" class="headerlink" title="问题找出来了，该如何解决呢？"></a>问题找出来了，该如何解决呢？</h4><p>最简单粗暴的方式就是把动态加载文字内容的函数放在componentWillMount(将要挂载)中，在render页面之前就把该部分内容加载完毕，这样render页面的时候scrollWidth将抓取到早已加载好的文字内容了，可是这样会造成打开页面后，页面空白一会，在渲染出页面的内容来，这段空白期间就是componentWillMount加载你的数据内容去了。如果数据内容少还好说，万一量很大了，那就尴尬了，严重影响用户体验。</p>
<p>####更好的解决办法是<br>仍把动态加载文字内容的函数放在componentDidMount中，并在此采用window.onload 调用滚动函数，也就是等页面都渲染完了，文字内容也ok了，才会调用滚动函数（scrollWidth，setInterval，transform ）。</p>
<p>这下，解决了生命周期以及用户体验，加载性能的问题。😀</p>
<p>如有错误和不足，恳请指出指导^ ^</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt; 今天写的一个react版的滚动字幕，思路是用js操作展示内容的scrollWidth,然后用setInterval 循环调用function ，function内容大体思路是对文字内容userDOM.style.transform = ‘translateX(-‘+ i +’px)’,每次横向左移动ipx的距离，形成滚动效果，当i&amp;gt;=scrollWidth的时候，将i归零，形成循环滚动。(这里操作了dom，不是很好)&lt;/p&gt;
&lt;p&gt;这里先解释一下浏览器scrollWidth，scrollWidth，offsetWidth三种宽度的区别&lt;br&gt;情况1：&lt;br&gt;元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。&lt;br&gt;scrollWidth=scrollWidth，两者皆为内容可视区的宽度。&lt;br&gt;offsetWidth为元素的实际宽度。&lt;br&gt;情况2：&lt;br&gt;元素的内容超过可视区，滚动条出现和可用的情况下。&lt;br&gt;scrollWidth&amp;gt;clientWidth。&lt;br&gt;scrollWidth为实际内容的宽度。&lt;br&gt;clientWidth是内容可视区的宽度。&lt;br&gt;offsetWidth是元素的实际宽度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="开发总结" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://yoursite.com/2017/04/29/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/04/29/冒泡排序/</id>
    <published>2017-04-29T09:46:44.000Z</published>
    <updated>2017-05-10T03:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。<br>在最好的情况，冒泡排序需要O(n^2)次交换，而插入排序只要最多O(n)交换。<br>冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地运行O(n^2)，而插入排序在这个例子只需要O(n)个运算<br>因此很多现代的算法教科书避免使用冒泡排序，而用插入排序替换之。冒泡排序如果能在内部循环第一次运行时，使用一个旗标来表示有无需要交换的可能，也可以把最好的复杂度降低到O(n)。在这个情况，已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序反过来，也可以稍微地改进效率。有时候称为鸡尾酒排序，因为算法会从数列的一端到另一端之间穿梭往返。</p>
<a id="more"></a>
<p>冒泡排序算法的运作如下：（两个for循环差不多搞定）</p>
<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br>由于它的简洁，冒泡排序通常被用来对于程序设计入门的学生介绍算法的概念。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function bubbleSort(arr)&#123;</div><div class="line">if(arr.length&lt;=1)&#123;</div><div class="line"> return arr;</div><div class="line"> &#125;</div><div class="line"> for(var j=0;j&lt;arr.length;j++)&#123;</div><div class="line">     for( var i = 0; i&lt;arr.length-j;i++)&#123;</div><div class="line">         if(arr[i] &gt; arr[i+1])&#123; </div><div class="line">             var num = arr[i];</div><div class="line">             arr[i] = arr[i+1];</div><div class="line">             arr[i+1] = num;</div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      return arr;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。&lt;br&gt;在最好的情况，冒泡排序需要O(n^2)次交换，而插入排序只要最多O(n)交换。&lt;br&gt;冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地运行O(n^2)，而插入排序在这个例子只需要O(n)个运算&lt;br&gt;因此很多现代的算法教科书避免使用冒泡排序，而用插入排序替换之。冒泡排序如果能在内部循环第一次运行时，使用一个旗标来表示有无需要交换的可能，也可以把最好的复杂度降低到O(n)。在这个情况，已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序反过来，也可以稍微地改进效率。有时候称为鸡尾酒排序，因为算法会从数列的一端到另一端之间穿梭往返。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>轻松学习JS快速排序(QuickSort)</title>
    <link href="http://yoursite.com/2017/04/29/%E8%BD%BB%E6%9D%BE%E5%AD%A6%E4%B9%A0JS%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-QuickSort/"/>
    <id>http://yoursite.com/2017/04/29/轻松学习JS快速排序-QuickSort/</id>
    <published>2017-04-29T03:32:03.000Z</published>
    <updated>2017-05-11T01:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需了解的基础知识"><a href="#需了解的基础知识" class="headerlink" title="需了解的基础知识"></a>需了解的基础知识</h3><p> 1.递归函数：编程语言中，函数Func(Type a,……)直接或间接调用函数本身，则该函数称为递归函数。<br> <code>一个典型阶乘递归函数：</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function fact(num)&#123; </div><div class="line">   if (num&lt;=1)&#123; </div><div class="line">   return 1; </div><div class="line">   &#125;else&#123; </div><div class="line">   return num*fact(num-1); </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> <code>该函数的弊端：</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var another=factorical;</div><div class="line">factorical=null;</div><div class="line">console.log(another(2))//会报错说 factorical not a function</div></pre></td></tr></table></figure></p>
<p> <code>解决方法</code>: 用arguments.callee去代替函数名，就可以确保函数不管怎么调用都不会出错。</p>
 <a id="more"></a>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function factorical(num)&#123;</div><div class="line">　　if(num&lt;=1)&#123;</div><div class="line">　　　　return 1;</div><div class="line">　　&#125;</div><div class="line">　　else&#123;</div><div class="line">　　　　return num*arguments.callee(num-1);</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line">var another=factorical;</div><div class="line">factorical=null;</div><div class="line">console.log(another(2))//2</div></pre></td></tr></table></figure>
<p> (来自js高程)<br> 2.<a href="http://www.jb51.net/article/88894.htm" target="_blank" rel="external">JavaScript中的splice方法用法详解</a><br> 3.<a href="http://www.w3school.com.cn/jsref/jsref_concat_array.asp" target="_blank" rel="external">JavaScript concat()方法</a><br> 3.<a href="http://www.jb51.net/article/86083.htm" target="_blank" rel="external">Javascript之Math对象详解</a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>以下内容整理自<code>阮一峰老师</code>的<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="external">快速排序（Quicksort）的Javascript实现</a></p>
<blockquote>
<p>首先，定义一个quickSort函数，它的参数是一个数组。</p>
</blockquote>
<p>var quickSort = function(arr) { </p>
<blockquote>
<p>然后，检查数组的元素个数，如果小于等于1，就返回。</p>
</blockquote>
<p>　　if (arr.length &lt;= 1) { return arr; } 
　　</p>
<blockquote>
<p>接着，选择”基准”（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。</p>
</blockquote>
<p>　　var pivotIndex = Math.floor(arr.length / 2);<br>　　var pivot = arr.splice(pivotIndex, 1);<br>　　var left = [];<br>　　var right = [];
　　</p>
<blockquote>
<p>然后，开始遍历数组，小于”基准”的元素放入左边的子集，大于基准的元素放入右边的子集。</p>
</blockquote>
<p>　　for (var i = 0; i &lt; arr.length; i++){<br>　　　　if (arr[i] &lt; pivot) {<br>　　　　　　left.push(arr[i]);<br>　　　　} else {<br>　　　　　　right.push(arr[i]);<br>　　　　}<br>　　}
　　</p>
<blockquote>
<p>最后，使用递归不断重复这个过程，就可以得到排序后的数组。</p>
</blockquote>
<p>　　return quickSort(left).concat([pivot], quickSort(right));<br>};</p>
<blockquote>
<p>使用的时候，直接调用quickSort()就行了。</p>
</blockquote>
<h3 id="最终的快排函数"><a href="#最终的快排函数" class="headerlink" title="最终的快排函数"></a>最终的快排函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class="line">　　var pivotIndex = Math.floor(arr.length / 2);</div><div class="line">　　var pivot = arr.splice(pivotIndex, 1);</div><div class="line">　　var left = [];</div><div class="line">　　var right = [];</div><div class="line">　　for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">　　　　if (arr[i] &lt; pivot) &#123;</div><div class="line">　　　　　　left.push(arr[i]);</div><div class="line">　　　　&#125; else &#123;</div><div class="line">　　　　　　right.push(arr[i]);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　return quickSort(left).concat([pivot], quickSort(right));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="实例运用"><a href="#实例运用" class="headerlink" title="实例运用"></a>实例运用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var array = [7,4,1,9,6,3,2,5,8] ;</div><div class="line">quickSort(array); //输出1，2，3，4，5，6，7，8，9</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需了解的基础知识&quot;&gt;&lt;a href=&quot;#需了解的基础知识&quot; class=&quot;headerlink&quot; title=&quot;需了解的基础知识&quot;&gt;&lt;/a&gt;需了解的基础知识&lt;/h3&gt;&lt;p&gt; 1.递归函数：编程语言中，函数Func(Type a,……)直接或间接调用函数本身，则该函数称为递归函数。&lt;br&gt; &lt;code&gt;一个典型阶乘递归函数：&lt;/code&gt;&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function fact(num)&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   if (num&amp;lt;=1)&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return 1; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;else&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return num*fact(num-1); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;该函数的弊端：&lt;/code&gt;&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var another=factorical;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;factorical=null;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(another(2))//会报错说 factorical not a function&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;解决方法&lt;/code&gt;: 用arguments.callee去代替函数名，就可以确保函数不管怎么调用都不会出错。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>开发中js数组的常用方法</title>
    <link href="http://yoursite.com/2017/04/27/%E5%BC%80%E5%8F%91%E4%B8%ADjs%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/27/开发中js数组的常用方法/</id>
    <published>2017-04-27T05:03:14.000Z</published>
    <updated>2017-05-10T03:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在ES5中，一共有9个Array方法：</li>
</ul>
<p>Array.prototype.indexOf;<br>Array.prototype.lastIndexOf;<br>Array.prototype.every;<br>Array.prototype.some;<br>Array.prototype.forEach;<br>Array.prototype.map;<br>Array.prototype.filter;<br>Array.prototype.reduce;<br>Array.prototype.reduceRight;</p>
<p>5种比较常用=&gt;index(),filter(),forEach(),map(),reduce().</p>
<blockquote>
<p>ps:reduce()还没搞懂，就先不整理了。<br>文末有个实例了解实际运用。</p>
</blockquote>
<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="1-indexOf"><a href="#1-indexOf" class="headerlink" title="1) indexOf"></a>1) indexOf</h4><p>indexOf()方法返回在该数组中第一个找到的元素位置，如果它不存在则返回-1。<br>不使用indexOf时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],</div><div class="line">found = false;</div><div class="line"> </div><div class="line">for(var i= 0, l = arr.length; i&lt; l; i++)&#123;</div><div class="line">if(arr[i] === &apos;a&apos;)&#123;</div><div class="line">found = true;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">console.log(&quot;found:&quot;,found);//输出found: true</div></pre></td></tr></table></figure>
<ul>
<li>indexOf使用后</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line"> </div><div class="line">console.log(&quot;found:&quot;, arr.indexOf(&quot;a&quot;) != -1);//输出found: true</div></pre></td></tr></table></figure>
<h4 id="2-filter"><a href="#2-filter" class="headerlink" title="2) filter"></a>2) filter</h4><p>该filter()方法创建一个新的匹配过滤条件的数组。</p>
<ul>
<li>不用 filter() 时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var arr = [</div><div class="line">  [&quot;a&quot;, 2],</div><div class="line">  [&quot;b&quot;, 5],</div><div class="line">  [&quot;c&quot;, 3],</div><div class="line">  [&quot;b&quot;, 16],</div><div class="line">];</div><div class="line">   </div><div class="line">var newArr = [];</div><div class="line"> </div><div class="line">for(var i= 0, l = arr.length; i&lt; l; i++)&#123;</div><div class="line">  if(arr[i][0] == &quot;b&quot; )&#123;</div><div class="line">newArr.push(arr[i]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">alert(newArr);//输出b,5,b,16</div></pre></td></tr></table></figure>
<ul>
<li>用了 filter():</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr = [</div><div class="line">  [&quot;a&quot;, 2],</div><div class="line">  [&quot;b&quot;, 5],</div><div class="line">  [&quot;c&quot;, 3],</div><div class="line">  [&quot;b&quot;, 16],</div><div class="line">];</div><div class="line">  var newArr = arr.filter(function(element, index, array)&#123;</div><div class="line">  return element[0] == &quot;b&quot; ;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">alert(newArr); //输出b,5,b,16</div></pre></td></tr></table></figure>
<h4 id="3-forEach"><a href="#3-forEach" class="headerlink" title="3) forEach()"></a>3) forEach()</h4><p>forEach为每个元素执行对应的方法,用来替换for循环</p>
<ul>
<li>不用 forEach() 时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5,6,7,8];</div><div class="line">for(var i= 0, l = arr.length; i&lt; l; i++)&#123;</div><div class="line">console.log(arr[i]); //输出 1 2 3 4 5 6 7 8 </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用了forEach()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5,6,7,8];</div><div class="line">arr.forEach(function(element, index, array)&#123;</div><div class="line">console.log(element);//输出 1 2 3 4 5 6 7 8 </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="4-map"><a href="#4-map" class="headerlink" title="4) map()"></a>4) map()</h4><p>map()对数组的每个元素进行一定操作（映射）后，会返回一个新的数组，<br>不使用map<br>map()是处理服务器返回数据时是一个非常实用的函数。</p>
<ul>
<li>不用 map() 时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var oldArr = [&#123;first_name:&quot;Colin&quot;,last_name:&quot;Toh&quot;&#125;,&#123;first_name:&quot;Addy&quot;,last_name:&quot;Osmani&quot;&#125;,&#123;first_name:&quot;Yehuda&quot;,last_name:&quot;Katz&quot;&#125;];</div><div class="line"> </div><div class="line">function getNewArr()&#123;</div><div class="line">   </div><div class="line">  var newArr = [];</div><div class="line">   </div><div class="line">  for(var i= 0, l = oldArr.length; i&lt; l; i++)&#123;</div><div class="line">    var item = oldArr[i];</div><div class="line">    full_name = [item.first_name,item.last_name].join(&quot; &quot;);</div><div class="line">    newArr[i] = full_name;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  return newArr;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">console.log(getNewArr());//输出 [&quot;Colin Toh&quot;, &quot;Addy Osmani&quot;, &quot;Yehuda Katz&quot;]</div></pre></td></tr></table></figure>
<ul>
<li>使用map后</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var oldArr = [&#123;first_name:&quot;Colin&quot;,last_name:&quot;Toh&quot;&#125;,&#123;first_name:&quot;Addy&quot;,last_name:&quot;Osmani&quot;&#125;,&#123;first_name:&quot;Yehuda&quot;,last_name:&quot;Katz&quot;&#125;];</div><div class="line"> </div><div class="line">function getNewArr()&#123;</div><div class="line">     </div><div class="line">  return oldArr.map(function(item,index)&#123;</div><div class="line">    full_name = [item.first_name,item.last_name].join(&quot; &quot;);</div><div class="line">    return full_name;</div><div class="line">  &#125;);</div><div class="line">   </div><div class="line">&#125;</div><div class="line"> </div><div class="line">console.log(getNewArr());  //输出 [&quot;Colin Toh&quot;, &quot;Addy Osmani&quot;, &quot;Yehuda Katz&quot;]</div></pre></td></tr></table></figure>
<h3 id="百度IFE的js任务-二-的运用"><a href="#百度IFE的js任务-二-的运用" class="headerlink" title="百度IFE的js任务(二)的运用"></a>百度IFE的js任务(二)的运用</h3><p><a href="http://ife.baidu.com/course/detail/id/91" target="_blank" rel="external">传送门</a><br>任务描述:参考以下示例代码，页面加载后，将提供的空气质量数据数组，按照某种逻辑（比如空气质量大于60）进行过滤筛选，最后将符合条件的数据按照一定的格式要求显示在网页上</p>
<p>实现思路：<br>1、用filter()方法筛选出值大于60的城市赋值给一个新的数组。<br>2、用sort()对这个新的数组进行由大到小的排序。<br>3、用forEach()代替for循环并动态创建li标签并打印名次和城市及其空气质量值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;title&gt;IFE JavaScript Task 01&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">  &lt;h3&gt;污染城市列表&lt;/h3&gt;</div><div class="line">  &lt;ul id=&quot;aqi-list&quot;&gt;</div><div class="line">&lt;!--   </div><div class="line">    &lt;li&gt;第一名：福州（样例），10&lt;/li&gt;</div><div class="line">      &lt;li&gt;第二名：福州（样例），10&lt;/li&gt; --&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line"></div><div class="line">var aqiData = [</div><div class="line">  [&quot;北京&quot;, 90],</div><div class="line">  [&quot;上海&quot;, 50],</div><div class="line">  [&quot;福州&quot;, 10],</div><div class="line">  [&quot;广州&quot;, 50],</div><div class="line">  [&quot;成都&quot;, 90],</div><div class="line">  [&quot;西安&quot;, 100]</div><div class="line">];</div><div class="line"></div><div class="line">(function () &#123;</div><div class="line"></div><div class="line">  /*</div><div class="line">  在注释下方编写代码</div><div class="line">  遍历读取aqiData中各个城市的数据</div><div class="line">  将空气质量指数大于60的城市显示到aqi-list的列表中</div><div class="line">  */</div><div class="line">   var aqiul=document.getElementById(&apos;aqi-list&apos;); //获取数组</div><div class="line"></div><div class="line"> //用filter()方法筛选出空气质量指数大于60的数组</div><div class="line">   var filtered = aqiData.filter(function(element, index, array)&#123;</div><div class="line">      return (element[1] &gt;= 60);</div><div class="line">    &#125;) ;</div><div class="line"></div><div class="line">   filtered.sort(function(a,b)&#123; //从大到小排序</div><div class="line">      return b[1]-a[1];</div><div class="line">  &#125;);</div><div class="line">   </div><div class="line">  //    (function wirte()&#123;    //输出  用for循环</div><div class="line">  //   for(var i=0;i&lt;filtered.length;i++)&#123;</div><div class="line">  //     var li=document.createElement(&apos;li&apos;);</div><div class="line">  //     aqiul.append(li);</div><div class="line">  //     li.innerHTML=&quot;第&quot;+(i+1)+&quot;名：&quot;+filtered[i];</div><div class="line">  //   &#125;</div><div class="line">  // &#125;)();</div><div class="line"></div><div class="line">//用forEach方法代替for循环</div><div class="line"> filtered.forEach(function(element, index, array)&#123;</div><div class="line">      var li=document.createElement(&apos;li&apos;);</div><div class="line">         aqiul.append(li);</div><div class="line">         li.innerHTML=&quot;第&quot;+(index+1)+&quot;名：&quot;+filtered[index];</div><div class="line"> &#125;);</div><div class="line"></div><div class="line">&#125;)();</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在ES5中，一共有9个Array方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Array.prototype.indexOf;&lt;br&gt;Array.prototype.lastIndexOf;&lt;br&gt;Array.prototype.every;&lt;br&gt;Array.prototype.some;&lt;br&gt;Array.prototype.forEach;&lt;br&gt;Array.prototype.map;&lt;br&gt;Array.prototype.filter;&lt;br&gt;Array.prototype.reduce;&lt;br&gt;Array.prototype.reduceRight;&lt;/p&gt;
&lt;p&gt;5种比较常用=&amp;gt;index(),filter(),forEach(),map(),reduce().&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps:reduce()还没搞懂，就先不整理了。&lt;br&gt;文末有个实例了解实际运用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于自执行函数（立即执行函数）</title>
    <link href="http://yoursite.com/2017/04/26/%E5%85%B3%E4%BA%8E%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%EF%BC%88%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/26/关于自执行函数（立即执行函数）/</id>
    <published>2017-04-26T15:42:12.000Z</published>
    <updated>2017-05-10T03:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是自执行函数？"><a href="#什么是自执行函数？" class="headerlink" title="什么是自执行函数？"></a>什么是自执行函数？</h3><p>一下有三种写法</p>
<p>1.最前最后加括号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(function()&#123;alert(1);&#125;());</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这种方法好处是能提醒阅读代码的人，这段代码是一个整体。 坏处是前面的代码行后记得加分号，不然会报错。如：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a=1 </div><div class="line">(function()&#123;alert(1);&#125;());</div></pre></td></tr></table></figure>
<p>2.function外面加括号 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(function()&#123;alert(1);&#125;)();</div></pre></td></tr></table></figure>
<blockquote>
<p>这种做法比方法1少了一个代码整体性的好处.</p>
</blockquote>
<p>3.function前面加运算符，常见的是!与void 。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!function()&#123;alert(1);&#125;(); </div><div class="line">void function()&#123;alert(2);&#125;();</div></pre></td></tr></table></figure>
<blockquote>
<p>显然，加上“!”或“+”等运算符，写起来是最简单的。加上“void ”要敲五下键盘，但是听说有一个好处是，比加”!”少一次逻辑运算。</p>
</blockquote>
<p><img src="http://images2015.cnblogs.com/blog/336056/201610/336056-20161011221635859-1560145581.png" alt="自执行函数"></p>
<ul>
<li>首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。</li>
<li>然后在匿名函数后面接一对括号 ()，调用这个匿名函数。</li>
</ul>
<h3 id="自执行函数的作用"><a href="#自执行函数的作用" class="headerlink" title="自执行函数的作用"></a>自执行函数的作用</h3><p>创建一个独立的作用域，这个作用域里面的变量，外面访问不到（即避免「变量污染」）</p>
<p>例子来看一个著名的面试题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var liList = ul.getElementsByTagName(&apos;li&apos;)</div><div class="line">for(var i=0; i&lt;6; i++)&#123;</div><div class="line">  liList[i].onclick = function()&#123;</div><div class="line">    alert(i) // 为什么 alert 出来的总是6,而不是0、1、2、3、4、5</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 为什么 alert 的总是 6 呢?</p>
<blockquote>
<p>因为 i 是贯穿整个作用域的，而不是给每个li 分配了一个i,如下：</p>
</blockquote>
<p><img src="http://images2015.cnblogs.com/blog/336056/201610/336056-20161011221647906-1355610620.png" alt="也是网上的图"></p>
<p> 那么怎么解决这个问题呢？</p>
<blockquote>
<p>用立即执行函数给每个li创造一个独立作用域即可（当然还有其他办法）：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var liList = ul.getElementsByTagName(&apos;li&apos;)</div><div class="line">for(var i=0; i&lt;6; i++)&#123;</div><div class="line">  !function(ii)&#123;</div><div class="line">    liList[ii].onclick = function()&#123;</div><div class="line">      alert(ii) // 0、1、2、3、4、5</div><div class="line">    &#125;</div><div class="line">  &#125;(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在立即执行函数执行的时候，i 的值被赋值给 ii，此后 ii 的值一直不变。i 的值从 0 变化到 5，对应 6 个立即执行函数，这 6 个立即执行函数里面的 ii 「分别」是 0、1、2、3、4、5。</p>
</blockquote>
<p>(整理自网络)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是自执行函数？&quot;&gt;&lt;a href=&quot;#什么是自执行函数？&quot; class=&quot;headerlink&quot; title=&quot;什么是自执行函数？&quot;&gt;&lt;/a&gt;什么是自执行函数？&lt;/h3&gt;&lt;p&gt;一下有三种写法&lt;/p&gt;
&lt;p&gt;1.最前最后加括号&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(function()&amp;#123;alert(1);&amp;#125;());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方法好处是能提醒阅读代码的人，这段代码是一个整体。 坏处是前面的代码行后记得加分号，不然会报错。如：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于this对象的一个易错点</title>
    <link href="http://yoursite.com/2017/04/26/%E5%85%B3%E4%BA%8Ethis%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E6%98%93%E9%94%99%E7%82%B9/"/>
    <id>http://yoursite.com/2017/04/26/关于this对象的一个易错点/</id>
    <published>2017-04-26T15:39:31.000Z</published>
    <updated>2017-05-10T03:43:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="先给一个例子"><a href="#先给一个例子" class="headerlink" title="先给一个例子"></a>先给一个例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window&quot;</div><div class="line">var object = &#123;</div><div class="line">    name : &quot;My Object&quot;,</div><div class="line">    </div><div class="line">    f1 : function()&#123;</div><div class="line">       return function()&#123;</div><div class="line">           return this.name;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line">  alert(object.f1()());</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>这个例子返回的字符串是 “The Window”，为啥不是”My Object”呢？</p>
</blockquote>
<ul>
<li>原因是每个函数在被调用时， 其活动对象都会自动取得两个特殊变量：<code>this</code>和<code>arguments</code>。内部函数在搜索这两个变最时， 只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。</li>
<li>也就是说要想让闭包【return function(){}】访问到外部函数【f1 :function(){}】里的this（或者arguments）变量，就要先将其赋值给到一个闭包能够访问到的变量里，如var that = this，这样就可以了。</li>
</ul>
<h4 id="修改后的例子如下"><a href="#修改后的例子如下" class="headerlink" title="修改后的例子如下"></a>修改后的例子如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window&quot;</div><div class="line">var object = &#123;</div><div class="line">    name : &quot;My Object&quot;,</div><div class="line">    </div><div class="line">    f1 : function()&#123;</div><div class="line">       var that = this; //添加这行</div><div class="line">       return function()&#123;</div><div class="line">           return this.name;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line">  alert(object.f1()());</div></pre></td></tr></table></figure>
<blockquote>
<p>返回”My Object”</p>
</blockquote>
<h4 id="另外一个例子"><a href="#另外一个例子" class="headerlink" title="另外一个例子"></a>另外一个例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window•;</div><div class="line">var object = &#123;</div><div class="line">    name : &quot;My Object&quot;;</div><div class="line">    getName: function() &#123;</div><div class="line">         return this.name;</div><div class="line">    &#125;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>上一个例子中的<br>return function(){<br>    return this.name；<br>}<br>被换掉了，不再是闭包</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">object.getName(); //&apos;My Object&apos;</div><div class="line">(object.getName)(); //&apos;My Object&quot;</div><div class="line">(object.getName = object.getNamel (); //&quot;The Window•, 在非严格模式下</div></pre></td></tr></table></figure>
<blockquote>
<p>第一行代码跟平常一样词用了object.getName (), 返回的是飞y Object”, 因为this.name<br>就是object.name。第二行代码在调用这个方法前先给它加上了括号。虽然加上括号之后， 就好􀉀只<br>是在引用一个函数， 但this的值得到了维持， 因为objec七.getName 和(object.getName)的定义<br>是相同的。第三行代码先执行了一条赋值语句，然后再诮用赋值后的结果。因为这个赋值表达式的值是<br>函数本身， 所以this的值不能得到维持， 结果就返回了崎The Window飞</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;先给一个例子&quot;&gt;&lt;a href=&quot;#先给一个例子&quot; class=&quot;headerlink&quot; title=&quot;先给一个例子&quot;&gt;&lt;/a&gt;先给一个例子&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var name = &amp;quot;The Window&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var object = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name : &amp;quot;My Object&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    f1 : function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       return function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           return this.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  alert(object.f1()());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的程序设计(二)</title>
    <link href="http://yoursite.com/2017/04/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/04/25/面向对象的程序设计-二/</id>
    <published>2017-04-25T12:36:34.000Z</published>
    <updated>2017-05-10T03:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h3 id="OO语言中支持两种继承方式：实现继承，接口继承"><a href="#OO语言中支持两种继承方式：实现继承，接口继承" class="headerlink" title="OO语言中支持两种继承方式：实现继承，接口继承"></a>OO语言中支持两种继承方式：实现继承，接口继承</h3><ul>
<li>实现继承：继承实际的方法  </li>
<li>接口继承：继承函数签名  </li>
</ul>
<h4 id="由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的"><a href="#由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的" class="headerlink" title="由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的"></a>由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的</h4><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><img src="http://ooytyiziz.bkt.clouddn.com/7895A860-4021-47A7-A343-BBC78A970381.png" alt="原型链"></p>
<a id="more"></a>
<h4 id="原型链的问题（缺点）"><a href="#原型链的问题（缺点）" class="headerlink" title="原型链的问题（缺点）"></a>原型链的问题（缺点）</h4><ul>
<li>1、当在实例中对引用类型的值进行操作时，很有可能改变原型中的值。（共享问题）  </li>
<li>2、在创建子类型的实例时，不能向超类型的构造函数中传递参数  </li>
</ul>
<h4 id="默认的原型"><a href="#默认的原型" class="headerlink" title="默认的原型"></a>默认的原型</h4><ul>
<li>所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针，指向Object.prototype。  </li>
</ul>
<h4 id="如何确定原型和实例之间的关系"><a href="#如何确定原型和实例之间的关系" class="headerlink" title="如何确定原型和实例之间的关系"></a>如何确定原型和实例之间的关系</h4><ul>
<li>1、通过instanceof:测试实例与原型链中出现过的构造函数，结果会返回true  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	   alert(instance instanceof Object)    //true  </div><div class="line">		alert(instance instanceof SuperType)    //true  </div><div class="line">		alert(instance instanceof Subtype)    //true  </div><div class="line">```  </div><div class="line">* 2、isPropertyOf()方法：只要是原型链中出现过的原型，都会返回true</div><div class="line"></div><div class="line">```  </div><div class="line">	    alert(Object.prtotype.isPropertyOf(instance))    //true  </div><div class="line">		alert(SuperType.prtotype.isPropertyOf(instance))    //true  </div><div class="line">		alert(Subtype.prtotype.isPropertyOf(instance))    //true</div></pre></td></tr></table></figure>
<h4 id="定义方法时要注意的几个问题"><a href="#定义方法时要注意的几个问题" class="headerlink" title="定义方法时要注意的几个问题"></a>定义方法时要注意的几个问题</h4><ul>
<li>场景：子类型优势需要覆盖超类型中的某个方法，或者需要添加类型中不存在的某个方法  </li>
<li>2、不能通过对象字面量方法添加新方法（因为会重写原型链）  </li>
<li>1、给子类型添加方法的代码一定要放在替换原型的语句之后（否则会因为重新定义了原型而导致添加代码无效）  </li>
</ul>
<h4 id="基本思想：利用原型，让一个引用类型继承另一个引用类型的属性和方法"><a href="#基本思想：利用原型，让一个引用类型继承另一个引用类型的属性和方法" class="headerlink" title="基本思想：利用原型，让一个引用类型继承另一个引用类型的属性和方法"></a>基本思想：利用原型，让一个引用类型继承另一个引用类型的属性和方法</h4><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function SuperType()&#123;  </div><div class="line">    this.SuperProperty = true;  </div><div class="line">&#125;;  </div><div class="line">SuperType.prototype.getSuperProperty = function()&#123;return this.SuperProperty&#125;;  </div><div class="line">  </div><div class="line">function SubType()&#123;  </div><div class="line">    this.SubProperty = false;  </div><div class="line">&#125;;  </div><div class="line">SubType.prototype = new SuperType();  </div><div class="line">SubType.prototype.getSubProperty = function()&#123;return this.getSubProperty&#125;;  </div><div class="line">  </div><div class="line">var instance = new SubType();  </div><div class="line">alert(instance.getSuperProperty()) //true</div></pre></td></tr></table></figure>
<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>1、方法都在构造函数中定义，函数无法复用，每个方法都是function的一个新实例  </li>
<li>2、在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式  </li>
</ul>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><ul>
<li>优点：借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  function SuperType (name) &#123;function   </div><div class="line">	this.name= name;  </div><div class="line">	&#125;  </div><div class="line">	function SubType () &#123;  </div><div class="line">	//继承了Super&apos;l&apos;ype, 同时还传递了参数  </div><div class="line">	superType.call(this, &quot;Nicholas&quot;);  </div><div class="line">	//实例属性  </div><div class="line">	this.age= 29;&#125;  </div><div class="line">	var instance= new SubType();  </div><div class="line">	alert(instance.name) ; //“Nicholas” alert(instance.age); //29  </div><div class="line">	</div><div class="line">```  </div><div class="line">#### 基本思想：在子类型构造函数中调用超类型构造函数  </div><div class="line"></div><div class="line">```  </div><div class="line">    function SuperType()&#123;  </div><div class="line">    this.color = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;]      </div><div class="line">&#125;;  </div><div class="line">function SubType()&#123;  </div><div class="line">    SuperType.call(this);  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul>
<li>1、将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式，又叫伪经典继承  </li>
<li>2、基本思想：使用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承  </li>
<li>3.是JavaScript中最常用的继承模式  </li>
</ul>
<h4 id="优点：既通过在原型上定义方法实现了函数的复用，又能够保证每个实例都有它自己的属性"><a href="#优点：既通过在原型上定义方法实现了函数的复用，又能够保证每个实例都有它自己的属性" class="headerlink" title="优点：既通过在原型上定义方法实现了函数的复用，又能够保证每个实例都有它自己的属性"></a>优点：既通过在原型上定义方法实现了函数的复用，又能够保证每个实例都有它自己的属性</h4><h4 id="组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为javascript中最常用的继承模式"><a href="#组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为javascript中最常用的继承模式" class="headerlink" title="组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为javascript中最常用的继承模式"></a>组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为javascript中最常用的继承模式</h4><h4 id="function-SuperType-name"><a href="#function-SuperType-name" class="headerlink" title="function SuperType(name){"></a>function SuperType(name){</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">    this.name = name;  </div><div class="line">    this.color = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;]  </div><div class="line">&#125;;  </div><div class="line">SuperType.prototype.sayName = function()&#123;alert(this.name)&#125;;  </div><div class="line">function SubType(name)&#123;  </div><div class="line">    SuperType.call(this,name);  </div><div class="line">    this.age = age;  </div><div class="line">&#125;;  </div><div class="line">SubType.prototype = new SuperType();  </div><div class="line">SubType.prototype.constructor = SubType;  </div><div class="line">SubType.prototype.sayAge = function()&#123;alert(this.age)&#125;;  </div><div class="line"></div><div class="line">```  </div><div class="line">### 原型式继承  </div><div class="line">  </div><div class="line">#### Object.creat()  </div><div class="line">  </div><div class="line">* 参数一  </div><div class="line">	* 用作新对象原型的对象 </div><div class="line"></div><div class="line">``` </div><div class="line">	 var person = &#123;name:&quot;Nick&quot; ,friends:[&quot;Tom&quot;,&quot;Sam&quot;]&#125;;  </div><div class="line">		var anotherPerson =Object.create(person);  </div><div class="line">```  </div><div class="line">* 参数二  </div><div class="line">	* 为新对象定义额外属性的对象（以这种方式指定的任何属性都会覆盖原型对象上的同名属性），注意格式</div><div class="line">	</div><div class="line">```  </div><div class="line">	   var person = &#123;name:&quot;Nick&quot; ,friends:[&quot;Tom&quot;,&quot;Sam&quot;]&#125;;  </div><div class="line">		var anotherPerson =Object.create(person,&#123;  </div><div class="line">		    name:&#123;  </div><div class="line">		    value:&quot;Greg&quot;  </div><div class="line">		    &#125;  </div><div class="line">		&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>ECMAScipt5通过新增的Object.create()规范化了原型式继承  </li>
</ul>
<h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function object(o)&#123;  </div><div class="line">    function F()&#123;&#125;;  </div><div class="line">    F.prototype = o;  </div><div class="line">    return new F();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var person = &#123;name:&quot;Nick&quot; ,friends:[&quot;Tom&quot;,&quot;Sam&quot;]&#125;;  </div><div class="line">var anotherPerson =object(person);  </div><div class="line">//person成为了anotherPerson的原型</div></pre></td></tr></table></figure>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><h4 id="寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。"><a href="#寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。" class="headerlink" title="寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。"></a>寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</h4><h4 id="缺点：不能实现函数复用"><a href="#缺点：不能实现函数复用" class="headerlink" title="缺点：不能实现函数复用"></a>缺点：不能实现函数复用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function creatAnother(original)&#123;  </div><div class="line">    var clone = object(original);  </div><div class="line">    clone.sayHi = function()&#123;alert(&quot;Hi&quot;)&#125;;  </div><div class="line">    return clone;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在主要考虑对象而不是自定义类型和构造函数的悄况下，寄生式继承也是一种有用的模式。"><a href="#在主要考虑对象而不是自定义类型和构造函数的悄况下，寄生式继承也是一种有用的模式。" class="headerlink" title="在主要考虑对象而不是自定义类型和构造函数的悄况下，寄生式继承也是一种有用的模式。"></a>在主要考虑对象而不是自定义类型和构造函数的悄况下，寄生式继承也是一种有用的模式。</h4><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><h4 id="所谓寄生组合式继承，即通过借用构造函数来继承属性，-通过原型链的混成形式来继承方法。"><a href="#所谓寄生组合式继承，即通过借用构造函数来继承属性，-通过原型链的混成形式来继承方法。" class="headerlink" title="所谓寄生组合式继承，即通过借用构造函数来继承属性， 通过原型链的混成形式来继承方法。"></a>所谓寄生组合式继承，即通过借用构造函数来继承属性， 通过原型链的混成形式来继承方法。</h4><h4 id="基本思路：-不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。"><a href="#基本思路：-不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。" class="headerlink" title="基本思路： 不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。"></a>基本思路： 不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</h4><h4 id="目的：解决组合继承模式中调用两次超类型构造函数，导致属性重写，影响性能的问题"><a href="#目的：解决组合继承模式中调用两次超类型构造函数，导致属性重写，影响性能的问题" class="headerlink" title="目的：解决组合继承模式中调用两次超类型构造函数，导致属性重写，影响性能的问题"></a>目的：解决组合继承模式中调用两次超类型构造函数，导致属性重写，影响性能的问题</h4><ul>
<li>组合继承例子：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function SuperType(name)&#123;  //超类型构造函数  </div><div class="line">	    this.name=name;  </div><div class="line">	    this.color=&#123;&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]  </div><div class="line">	  &#125;  </div><div class="line">	 SuperType.prototype.sayName=function()&#123;  </div><div class="line">	 alert(this.name);  </div><div class="line">	 function SubType(name,age)&#123;  </div><div class="line">	     SuperType.call(this,name) //第二次调用  </div><div class="line">	     this.age = age;  </div><div class="line">	 &#125;  </div><div class="line">	 SubType.prototype = new SuperType(); //第一次调用  </div><div class="line">	 SubType.prototype.construtor =SuperType;  </div><div class="line">	 SubType.protptype.sayAge =function()&#123;  </div><div class="line">	     alert(this.age)</div></pre></td></tr></table></figure>
<h4 id="这个例子高效体现在它只调用了一次SuperType的构造函数，并且避免了再prototype上创建不必要的、多余的属性。同时还能保证原型链不变"><a href="#这个例子高效体现在它只调用了一次SuperType的构造函数，并且避免了再prototype上创建不必要的、多余的属性。同时还能保证原型链不变" class="headerlink" title="这个例子高效体现在它只调用了一次SuperType的构造函数，并且避免了再prototype上创建不必要的、多余的属性。同时还能保证原型链不变"></a>这个例子高效体现在它只调用了一次SuperType的构造函数，并且避免了再prototype上创建不必要的、多余的属性。同时还能保证原型链不变</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   function inheritPrototype(subType,superType)&#123;  </div><div class="line">    //prototype成为superType的一个副本，而不用调用构造函数  </div><div class="line">    var prototype = SuperType.prototype;  </div><div class="line">    prototype.constructor = SubType;  </div><div class="line">    SubType.prototype = prototype;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function SuperType(name)&#123;  </div><div class="line">    this.name = name;  </div><div class="line">&#125;;  </div><div class="line">SuperType.prototype.sayName = function()&#123;alert(this.name)&#125;;  </div><div class="line">function SubType(name,age)&#123;  </div><div class="line">    SuperType.call(this,name);  </div><div class="line">    this.age = age;  </div><div class="line">&#125;  </div><div class="line">inheritPrototype(Subtype,SuperType);  </div><div class="line">SubType.prototype.sayAge = function()&#123;alert(this.age)&#125;;  </div><div class="line"></div><div class="line">    function inheritPrototype(SubType，SuperType)&#123;   </div><div class="line">      var prototype = object(SuperType.prototype);//创建对象  </div><div class="line">     prototype.constructor = subType;//增强对象  </div><div class="line">      subType.prototype = prototype ;//指定对象  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>在函数内部，第一步是创建超类型原型的一个副本。第二步是为创建的副本添加constructor屈性，从而弥补因重写原型而失去的默认的constructor属性。最后一步， 将新创建的对象（即副本）赋值给子类型的原型。  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;h3 id=&quot;OO语言中支持两种继承方式：实现继承，接口继承&quot;&gt;&lt;a href=&quot;#OO语言中支持两种继承方式：实现继承，接口继承&quot; class=&quot;headerlink&quot; title=&quot;OO语言中支持两种继承方式：实现继承，接口继承&quot;&gt;&lt;/a&gt;OO语言中支持两种继承方式：实现继承，接口继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现继承：继承实际的方法  &lt;/li&gt;
&lt;li&gt;接口继承：继承函数签名  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的&quot;&gt;&lt;a href=&quot;#由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的&quot; class=&quot;headerlink&quot; title=&quot;由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的&quot;&gt;&lt;/a&gt;由于函数没有签名，在ECMAScript中只支持实现继承，而且是依靠原型链来实现的&lt;/h4&gt;&lt;h3 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ooytyiziz.bkt.clouddn.com/7895A860-4021-47A7-A343-BBC78A970381.png&quot; alt=&quot;原型链&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
